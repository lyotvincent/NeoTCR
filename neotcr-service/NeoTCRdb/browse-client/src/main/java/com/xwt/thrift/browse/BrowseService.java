/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xwt.thrift.browse;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-07")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class BrowseService {

  public interface Iface {

    public java.util.List<NeoTCR> getAllTCR() throws org.apache.thrift.TException;

    public java.util.List<NeoTCR> getTCRStr(java.lang.String selectStr) throws org.apache.thrift.TException;

    public java.util.List<NeoTCR> getTCR(java.util.List<java.lang.String> antigen, java.util.List<java.lang.String> aminoAcidExchange, java.util.List<java.lang.String> hlaAllele, java.util.List<java.lang.String> traCDR3, java.util.List<java.lang.String> trav, java.util.List<java.lang.String> traj, java.util.List<java.lang.String> trbCDR3, java.util.List<java.lang.String> trbv, java.util.List<java.lang.String> trbj, java.util.List<java.lang.String> tumor) throws org.apache.thrift.TException;

    public java.util.List<NeoTCR> getNeo(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException;

    public java.util.List<CDR3TCR> getCDR3TCR(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException;

    public java.util.List<McPAS> getMcPAS(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllTCR(org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException;

    public void getTCRStr(java.lang.String selectStr, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException;

    public void getTCR(java.util.List<java.lang.String> antigen, java.util.List<java.lang.String> aminoAcidExchange, java.util.List<java.lang.String> hlaAllele, java.util.List<java.lang.String> traCDR3, java.util.List<java.lang.String> trav, java.util.List<java.lang.String> traj, java.util.List<java.lang.String> trbCDR3, java.util.List<java.lang.String> trbv, java.util.List<java.lang.String> trbj, java.util.List<java.lang.String> tumor, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException;

    public void getNeo(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException;

    public void getCDR3TCR(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CDR3TCR>> resultHandler) throws org.apache.thrift.TException;

    public void getMcPAS(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<McPAS>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.List<NeoTCR> getAllTCR() throws org.apache.thrift.TException
    {
      send_getAllTCR();
      return recv_getAllTCR();
    }

    public void send_getAllTCR() throws org.apache.thrift.TException
    {
      getAllTCR_args args = new getAllTCR_args();
      sendBase("getAllTCR", args);
    }

    public java.util.List<NeoTCR> recv_getAllTCR() throws org.apache.thrift.TException
    {
      getAllTCR_result result = new getAllTCR_result();
      receiveBase(result, "getAllTCR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllTCR failed: unknown result");
    }

    @Override
    public java.util.List<NeoTCR> getTCRStr(java.lang.String selectStr) throws org.apache.thrift.TException
    {
      send_getTCRStr(selectStr);
      return recv_getTCRStr();
    }

    public void send_getTCRStr(java.lang.String selectStr) throws org.apache.thrift.TException
    {
      getTCRStr_args args = new getTCRStr_args();
      args.setSelectStr(selectStr);
      sendBase("getTCRStr", args);
    }

    public java.util.List<NeoTCR> recv_getTCRStr() throws org.apache.thrift.TException
    {
      getTCRStr_result result = new getTCRStr_result();
      receiveBase(result, "getTCRStr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCRStr failed: unknown result");
    }

    @Override
    public java.util.List<NeoTCR> getTCR(java.util.List<java.lang.String> antigen, java.util.List<java.lang.String> aminoAcidExchange, java.util.List<java.lang.String> hlaAllele, java.util.List<java.lang.String> traCDR3, java.util.List<java.lang.String> trav, java.util.List<java.lang.String> traj, java.util.List<java.lang.String> trbCDR3, java.util.List<java.lang.String> trbv, java.util.List<java.lang.String> trbj, java.util.List<java.lang.String> tumor) throws org.apache.thrift.TException
    {
      send_getTCR(antigen, aminoAcidExchange, hlaAllele, traCDR3, trav, traj, trbCDR3, trbv, trbj, tumor);
      return recv_getTCR();
    }

    public void send_getTCR(java.util.List<java.lang.String> antigen, java.util.List<java.lang.String> aminoAcidExchange, java.util.List<java.lang.String> hlaAllele, java.util.List<java.lang.String> traCDR3, java.util.List<java.lang.String> trav, java.util.List<java.lang.String> traj, java.util.List<java.lang.String> trbCDR3, java.util.List<java.lang.String> trbv, java.util.List<java.lang.String> trbj, java.util.List<java.lang.String> tumor) throws org.apache.thrift.TException
    {
      getTCR_args args = new getTCR_args();
      args.setAntigen(antigen);
      args.setAminoAcidExchange(aminoAcidExchange);
      args.setHlaAllele(hlaAllele);
      args.setTraCDR3(traCDR3);
      args.setTrav(trav);
      args.setTraj(traj);
      args.setTrbCDR3(trbCDR3);
      args.setTrbv(trbv);
      args.setTrbj(trbj);
      args.setTumor(tumor);
      sendBase("getTCR", args);
    }

    public java.util.List<NeoTCR> recv_getTCR() throws org.apache.thrift.TException
    {
      getTCR_result result = new getTCR_result();
      receiveBase(result, "getTCR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTCR failed: unknown result");
    }

    @Override
    public java.util.List<NeoTCR> getNeo(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException
    {
      send_getNeo(cdrs);
      return recv_getNeo();
    }

    public void send_getNeo(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException
    {
      getNeo_args args = new getNeo_args();
      args.setCdrs(cdrs);
      sendBase("getNeo", args);
    }

    public java.util.List<NeoTCR> recv_getNeo() throws org.apache.thrift.TException
    {
      getNeo_result result = new getNeo_result();
      receiveBase(result, "getNeo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNeo failed: unknown result");
    }

    @Override
    public java.util.List<CDR3TCR> getCDR3TCR(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException
    {
      send_getCDR3TCR(cdrs);
      return recv_getCDR3TCR();
    }

    public void send_getCDR3TCR(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException
    {
      getCDR3TCR_args args = new getCDR3TCR_args();
      args.setCdrs(cdrs);
      sendBase("getCDR3TCR", args);
    }

    public java.util.List<CDR3TCR> recv_getCDR3TCR() throws org.apache.thrift.TException
    {
      getCDR3TCR_result result = new getCDR3TCR_result();
      receiveBase(result, "getCDR3TCR");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCDR3TCR failed: unknown result");
    }

    @Override
    public java.util.List<McPAS> getMcPAS(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException
    {
      send_getMcPAS(cdrs);
      return recv_getMcPAS();
    }

    public void send_getMcPAS(java.util.List<java.lang.String> cdrs) throws org.apache.thrift.TException
    {
      getMcPAS_args args = new getMcPAS_args();
      args.setCdrs(cdrs);
      sendBase("getMcPAS", args);
    }

    public java.util.List<McPAS> recv_getMcPAS() throws org.apache.thrift.TException
    {
      getMcPAS_result result = new getMcPAS_result();
      receiveBase(result, "getMcPAS");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMcPAS failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void getAllTCR(org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllTCR_call method_call = new getAllTCR_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllTCR_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeoTCR>> {
      public getAllTCR_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTCR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllTCR_args args = new getAllTCR_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<NeoTCR> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllTCR();
      }
    }

    @Override
    public void getTCRStr(java.lang.String selectStr, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCRStr_call method_call = new getTCRStr_call(selectStr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCRStr_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeoTCR>> {
      private java.lang.String selectStr;
      public getTCRStr_call(java.lang.String selectStr, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.selectStr = selectStr;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCRStr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCRStr_args args = new getTCRStr_args();
        args.setSelectStr(selectStr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<NeoTCR> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCRStr();
      }
    }

    @Override
    public void getTCR(java.util.List<java.lang.String> antigen, java.util.List<java.lang.String> aminoAcidExchange, java.util.List<java.lang.String> hlaAllele, java.util.List<java.lang.String> traCDR3, java.util.List<java.lang.String> trav, java.util.List<java.lang.String> traj, java.util.List<java.lang.String> trbCDR3, java.util.List<java.lang.String> trbv, java.util.List<java.lang.String> trbj, java.util.List<java.lang.String> tumor, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTCR_call method_call = new getTCR_call(antigen, aminoAcidExchange, hlaAllele, traCDR3, trav, traj, trbCDR3, trbv, trbj, tumor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTCR_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeoTCR>> {
      private java.util.List<java.lang.String> antigen;
      private java.util.List<java.lang.String> aminoAcidExchange;
      private java.util.List<java.lang.String> hlaAllele;
      private java.util.List<java.lang.String> traCDR3;
      private java.util.List<java.lang.String> trav;
      private java.util.List<java.lang.String> traj;
      private java.util.List<java.lang.String> trbCDR3;
      private java.util.List<java.lang.String> trbv;
      private java.util.List<java.lang.String> trbj;
      private java.util.List<java.lang.String> tumor;
      public getTCR_call(java.util.List<java.lang.String> antigen, java.util.List<java.lang.String> aminoAcidExchange, java.util.List<java.lang.String> hlaAllele, java.util.List<java.lang.String> traCDR3, java.util.List<java.lang.String> trav, java.util.List<java.lang.String> traj, java.util.List<java.lang.String> trbCDR3, java.util.List<java.lang.String> trbv, java.util.List<java.lang.String> trbj, java.util.List<java.lang.String> tumor, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.antigen = antigen;
        this.aminoAcidExchange = aminoAcidExchange;
        this.hlaAllele = hlaAllele;
        this.traCDR3 = traCDR3;
        this.trav = trav;
        this.traj = traj;
        this.trbCDR3 = trbCDR3;
        this.trbv = trbv;
        this.trbj = trbj;
        this.tumor = tumor;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTCR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTCR_args args = new getTCR_args();
        args.setAntigen(antigen);
        args.setAminoAcidExchange(aminoAcidExchange);
        args.setHlaAllele(hlaAllele);
        args.setTraCDR3(traCDR3);
        args.setTrav(trav);
        args.setTraj(traj);
        args.setTrbCDR3(trbCDR3);
        args.setTrbv(trbv);
        args.setTrbj(trbj);
        args.setTumor(tumor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<NeoTCR> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTCR();
      }
    }

    @Override
    public void getNeo(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNeo_call method_call = new getNeo_call(cdrs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNeo_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<NeoTCR>> {
      private java.util.List<java.lang.String> cdrs;
      public getNeo_call(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cdrs = cdrs;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNeo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNeo_args args = new getNeo_args();
        args.setCdrs(cdrs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<NeoTCR> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNeo();
      }
    }

    @Override
    public void getCDR3TCR(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CDR3TCR>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCDR3TCR_call method_call = new getCDR3TCR_call(cdrs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCDR3TCR_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CDR3TCR>> {
      private java.util.List<java.lang.String> cdrs;
      public getCDR3TCR_call(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CDR3TCR>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cdrs = cdrs;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCDR3TCR", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCDR3TCR_args args = new getCDR3TCR_args();
        args.setCdrs(cdrs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<CDR3TCR> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCDR3TCR();
      }
    }

    @Override
    public void getMcPAS(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<McPAS>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMcPAS_call method_call = new getMcPAS_call(cdrs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMcPAS_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<McPAS>> {
      private java.util.List<java.lang.String> cdrs;
      public getMcPAS_call(java.util.List<java.lang.String> cdrs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<McPAS>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cdrs = cdrs;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMcPAS", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMcPAS_args args = new getMcPAS_args();
        args.setCdrs(cdrs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<McPAS> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMcPAS();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllTCR", new getAllTCR());
      processMap.put("getTCRStr", new getTCRStr());
      processMap.put("getTCR", new getTCR());
      processMap.put("getNeo", new getNeo());
      processMap.put("getCDR3TCR", new getCDR3TCR());
      processMap.put("getMcPAS", new getMcPAS());
      return processMap;
    }

    public static class getAllTCR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllTCR_args> {
      public getAllTCR() {
        super("getAllTCR");
      }

      @Override
      public getAllTCR_args getEmptyArgsInstance() {
        return new getAllTCR_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getAllTCR_result getResult(I iface, getAllTCR_args args) throws org.apache.thrift.TException {
        getAllTCR_result result = new getAllTCR_result();
        result.success = iface.getAllTCR();
        return result;
      }
    }

    public static class getTCRStr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCRStr_args> {
      public getTCRStr() {
        super("getTCRStr");
      }

      @Override
      public getTCRStr_args getEmptyArgsInstance() {
        return new getTCRStr_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getTCRStr_result getResult(I iface, getTCRStr_args args) throws org.apache.thrift.TException {
        getTCRStr_result result = new getTCRStr_result();
        result.success = iface.getTCRStr(args.selectStr);
        return result;
      }
    }

    public static class getTCR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTCR_args> {
      public getTCR() {
        super("getTCR");
      }

      @Override
      public getTCR_args getEmptyArgsInstance() {
        return new getTCR_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getTCR_result getResult(I iface, getTCR_args args) throws org.apache.thrift.TException {
        getTCR_result result = new getTCR_result();
        result.success = iface.getTCR(args.antigen, args.aminoAcidExchange, args.hlaAllele, args.traCDR3, args.trav, args.traj, args.trbCDR3, args.trbv, args.trbj, args.tumor);
        return result;
      }
    }

    public static class getNeo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNeo_args> {
      public getNeo() {
        super("getNeo");
      }

      @Override
      public getNeo_args getEmptyArgsInstance() {
        return new getNeo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getNeo_result getResult(I iface, getNeo_args args) throws org.apache.thrift.TException {
        getNeo_result result = new getNeo_result();
        result.success = iface.getNeo(args.cdrs);
        return result;
      }
    }

    public static class getCDR3TCR<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCDR3TCR_args> {
      public getCDR3TCR() {
        super("getCDR3TCR");
      }

      @Override
      public getCDR3TCR_args getEmptyArgsInstance() {
        return new getCDR3TCR_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getCDR3TCR_result getResult(I iface, getCDR3TCR_args args) throws org.apache.thrift.TException {
        getCDR3TCR_result result = new getCDR3TCR_result();
        result.success = iface.getCDR3TCR(args.cdrs);
        return result;
      }
    }

    public static class getMcPAS<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMcPAS_args> {
      public getMcPAS() {
        super("getMcPAS");
      }

      @Override
      public getMcPAS_args getEmptyArgsInstance() {
        return new getMcPAS_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getMcPAS_result getResult(I iface, getMcPAS_args args) throws org.apache.thrift.TException {
        getMcPAS_result result = new getMcPAS_result();
        result.success = iface.getMcPAS(args.cdrs);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllTCR", new getAllTCR());
      processMap.put("getTCRStr", new getTCRStr());
      processMap.put("getTCR", new getTCR());
      processMap.put("getNeo", new getNeo());
      processMap.put("getCDR3TCR", new getCDR3TCR());
      processMap.put("getMcPAS", new getMcPAS());
      return processMap;
    }

    public static class getAllTCR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllTCR_args, java.util.List<NeoTCR>> {
      public getAllTCR() {
        super("getAllTCR");
      }

      @Override
      public getAllTCR_args getEmptyArgsInstance() {
        return new getAllTCR_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>>() { 
          @Override
          public void onComplete(java.util.List<NeoTCR> o) {
            getAllTCR_result result = new getAllTCR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllTCR_result result = new getAllTCR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getAllTCR_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllTCR(resultHandler);
      }
    }

    public static class getTCRStr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCRStr_args, java.util.List<NeoTCR>> {
      public getTCRStr() {
        super("getTCRStr");
      }

      @Override
      public getTCRStr_args getEmptyArgsInstance() {
        return new getTCRStr_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>>() { 
          @Override
          public void onComplete(java.util.List<NeoTCR> o) {
            getTCRStr_result result = new getTCRStr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTCRStr_result result = new getTCRStr_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getTCRStr_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
        iface.getTCRStr(args.selectStr,resultHandler);
      }
    }

    public static class getTCR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTCR_args, java.util.List<NeoTCR>> {
      public getTCR() {
        super("getTCR");
      }

      @Override
      public getTCR_args getEmptyArgsInstance() {
        return new getTCR_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>>() { 
          @Override
          public void onComplete(java.util.List<NeoTCR> o) {
            getTCR_result result = new getTCR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTCR_result result = new getTCR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getTCR_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
        iface.getTCR(args.antigen, args.aminoAcidExchange, args.hlaAllele, args.traCDR3, args.trav, args.traj, args.trbCDR3, args.trbv, args.trbj, args.tumor,resultHandler);
      }
    }

    public static class getNeo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNeo_args, java.util.List<NeoTCR>> {
      public getNeo() {
        super("getNeo");
      }

      @Override
      public getNeo_args getEmptyArgsInstance() {
        return new getNeo_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>>() { 
          @Override
          public void onComplete(java.util.List<NeoTCR> o) {
            getNeo_result result = new getNeo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getNeo_result result = new getNeo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getNeo_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<NeoTCR>> resultHandler) throws org.apache.thrift.TException {
        iface.getNeo(args.cdrs,resultHandler);
      }
    }

    public static class getCDR3TCR<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCDR3TCR_args, java.util.List<CDR3TCR>> {
      public getCDR3TCR() {
        super("getCDR3TCR");
      }

      @Override
      public getCDR3TCR_args getEmptyArgsInstance() {
        return new getCDR3TCR_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CDR3TCR>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CDR3TCR>>() { 
          @Override
          public void onComplete(java.util.List<CDR3TCR> o) {
            getCDR3TCR_result result = new getCDR3TCR_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCDR3TCR_result result = new getCDR3TCR_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getCDR3TCR_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CDR3TCR>> resultHandler) throws org.apache.thrift.TException {
        iface.getCDR3TCR(args.cdrs,resultHandler);
      }
    }

    public static class getMcPAS<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMcPAS_args, java.util.List<McPAS>> {
      public getMcPAS() {
        super("getMcPAS");
      }

      @Override
      public getMcPAS_args getEmptyArgsInstance() {
        return new getMcPAS_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<McPAS>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<McPAS>>() { 
          @Override
          public void onComplete(java.util.List<McPAS> o) {
            getMcPAS_result result = new getMcPAS_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMcPAS_result result = new getMcPAS_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getMcPAS_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<McPAS>> resultHandler) throws org.apache.thrift.TException {
        iface.getMcPAS(args.cdrs,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAllTCR_args implements org.apache.thrift.TBase<getAllTCR_args, getAllTCR_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTCR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTCR_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTCR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTCR_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTCR_args.class, metaDataMap);
    }

    public getAllTCR_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTCR_args(getAllTCR_args other) {
    }

    @Override
    public getAllTCR_args deepCopy() {
      return new getAllTCR_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAllTCR_args)
        return this.equals((getAllTCR_args)that);
      return false;
    }

    public boolean equals(getAllTCR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getAllTCR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTCR_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTCR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllTCR_argsStandardScheme getScheme() {
        return new getAllTCR_argsStandardScheme();
      }
    }

    private static class getAllTCR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllTCR_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTCR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTCR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllTCR_argsTupleScheme getScheme() {
        return new getAllTCR_argsTupleScheme();
      }
    }

    private static class getAllTCR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllTCR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAllTCR_result implements org.apache.thrift.TBase<getAllTCR_result, getAllTCR_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTCR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTCR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTCR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTCR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeoTCR.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTCR_result.class, metaDataMap);
    }

    public getAllTCR_result() {
    }

    public getAllTCR_result(
      java.util.List<NeoTCR> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTCR_result(getAllTCR_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeoTCR> __this__success = new java.util.ArrayList<NeoTCR>(other.success.size());
        for (NeoTCR other_element : other.success) {
          __this__success.add(new NeoTCR(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getAllTCR_result deepCopy() {
      return new getAllTCR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<NeoTCR> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeoTCR elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeoTCR>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<NeoTCR> getSuccess() {
      return this.success;
    }

    public getAllTCR_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeoTCR>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAllTCR_result)
        return this.equals((getAllTCR_result)that);
      return false;
    }

    public boolean equals(getAllTCR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllTCR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTCR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTCR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllTCR_resultStandardScheme getScheme() {
        return new getAllTCR_resultStandardScheme();
      }
    }

    private static class getAllTCR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllTCR_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeoTCR>(_list0.size);
                  @org.apache.thrift.annotation.Nullable NeoTCR _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new NeoTCR();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTCR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeoTCR _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTCR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAllTCR_resultTupleScheme getScheme() {
        return new getAllTCR_resultTupleScheme();
      }
    }

    private static class getAllTCR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllTCR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeoTCR _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<NeoTCR>(_list5.size);
            @org.apache.thrift.annotation.Nullable NeoTCR _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new NeoTCR();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTCRStr_args implements org.apache.thrift.TBase<getTCRStr_args, getTCRStr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCRStr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCRStr_args");

    private static final org.apache.thrift.protocol.TField SELECT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("selectStr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTCRStr_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTCRStr_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String selectStr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SELECT_STR((short)1, "selectStr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SELECT_STR
            return SELECT_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SELECT_STR, new org.apache.thrift.meta_data.FieldMetaData("selectStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCRStr_args.class, metaDataMap);
    }

    public getTCRStr_args() {
    }

    public getTCRStr_args(
      java.lang.String selectStr)
    {
      this();
      this.selectStr = selectStr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCRStr_args(getTCRStr_args other) {
      if (other.isSetSelectStr()) {
        this.selectStr = other.selectStr;
      }
    }

    @Override
    public getTCRStr_args deepCopy() {
      return new getTCRStr_args(this);
    }

    @Override
    public void clear() {
      this.selectStr = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSelectStr() {
      return this.selectStr;
    }

    public getTCRStr_args setSelectStr(@org.apache.thrift.annotation.Nullable java.lang.String selectStr) {
      this.selectStr = selectStr;
      return this;
    }

    public void unsetSelectStr() {
      this.selectStr = null;
    }

    /** Returns true if field selectStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSelectStr() {
      return this.selectStr != null;
    }

    public void setSelectStrIsSet(boolean value) {
      if (!value) {
        this.selectStr = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SELECT_STR:
        if (value == null) {
          unsetSelectStr();
        } else {
          setSelectStr((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SELECT_STR:
        return getSelectStr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SELECT_STR:
        return isSetSelectStr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTCRStr_args)
        return this.equals((getTCRStr_args)that);
      return false;
    }

    public boolean equals(getTCRStr_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_selectStr = true && this.isSetSelectStr();
      boolean that_present_selectStr = true && that.isSetSelectStr();
      if (this_present_selectStr || that_present_selectStr) {
        if (!(this_present_selectStr && that_present_selectStr))
          return false;
        if (!this.selectStr.equals(that.selectStr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSelectStr()) ? 131071 : 524287);
      if (isSetSelectStr())
        hashCode = hashCode * 8191 + selectStr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTCRStr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSelectStr(), other.isSetSelectStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSelectStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selectStr, other.selectStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTCRStr_args(");
      boolean first = true;

      sb.append("selectStr:");
      if (this.selectStr == null) {
        sb.append("null");
      } else {
        sb.append(this.selectStr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCRStr_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCRStr_argsStandardScheme getScheme() {
        return new getTCRStr_argsStandardScheme();
      }
    }

    private static class getTCRStr_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTCRStr_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCRStr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SELECT_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.selectStr = iprot.readString();
                struct.setSelectStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCRStr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.selectStr != null) {
          oprot.writeFieldBegin(SELECT_STR_FIELD_DESC);
          oprot.writeString(struct.selectStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCRStr_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCRStr_argsTupleScheme getScheme() {
        return new getTCRStr_argsTupleScheme();
      }
    }

    private static class getTCRStr_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTCRStr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCRStr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSelectStr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSelectStr()) {
          oprot.writeString(struct.selectStr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCRStr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.selectStr = iprot.readString();
          struct.setSelectStrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTCRStr_result implements org.apache.thrift.TBase<getTCRStr_result, getTCRStr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCRStr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCRStr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTCRStr_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTCRStr_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeoTCR.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCRStr_result.class, metaDataMap);
    }

    public getTCRStr_result() {
    }

    public getTCRStr_result(
      java.util.List<NeoTCR> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCRStr_result(getTCRStr_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeoTCR> __this__success = new java.util.ArrayList<NeoTCR>(other.success.size());
        for (NeoTCR other_element : other.success) {
          __this__success.add(new NeoTCR(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getTCRStr_result deepCopy() {
      return new getTCRStr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<NeoTCR> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeoTCR elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeoTCR>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<NeoTCR> getSuccess() {
      return this.success;
    }

    public getTCRStr_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeoTCR>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTCRStr_result)
        return this.equals((getTCRStr_result)that);
      return false;
    }

    public boolean equals(getTCRStr_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTCRStr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTCRStr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCRStr_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCRStr_resultStandardScheme getScheme() {
        return new getTCRStr_resultStandardScheme();
      }
    }

    private static class getTCRStr_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTCRStr_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCRStr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeoTCR>(_list8.size);
                  @org.apache.thrift.annotation.Nullable NeoTCR _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new NeoTCR();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCRStr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeoTCR _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCRStr_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCRStr_resultTupleScheme getScheme() {
        return new getTCRStr_resultTupleScheme();
      }
    }

    private static class getTCRStr_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTCRStr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCRStr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeoTCR _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCRStr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<NeoTCR>(_list13.size);
            @org.apache.thrift.annotation.Nullable NeoTCR _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new NeoTCR();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTCR_args implements org.apache.thrift.TBase<getTCR_args, getTCR_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTCR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCR_args");

    private static final org.apache.thrift.protocol.TField ANTIGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("antigen", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField AMINO_ACID_EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("aminoAcidExchange", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField HLA_ALLELE_FIELD_DESC = new org.apache.thrift.protocol.TField("hlaAllele", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField TRA_CDR3_FIELD_DESC = new org.apache.thrift.protocol.TField("traCDR3", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField TRAV_FIELD_DESC = new org.apache.thrift.protocol.TField("trav", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField TRAJ_FIELD_DESC = new org.apache.thrift.protocol.TField("traj", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField TRB_CDR3_FIELD_DESC = new org.apache.thrift.protocol.TField("trbCDR3", org.apache.thrift.protocol.TType.LIST, (short)7);
    private static final org.apache.thrift.protocol.TField TRBV_FIELD_DESC = new org.apache.thrift.protocol.TField("trbv", org.apache.thrift.protocol.TType.LIST, (short)8);
    private static final org.apache.thrift.protocol.TField TRBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("trbj", org.apache.thrift.protocol.TType.LIST, (short)9);
    private static final org.apache.thrift.protocol.TField TUMOR_FIELD_DESC = new org.apache.thrift.protocol.TField("tumor", org.apache.thrift.protocol.TType.LIST, (short)10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTCR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTCR_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> antigen; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> aminoAcidExchange; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hlaAllele; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> traCDR3; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trav; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> traj; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trbCDR3; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trbv; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trbj; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tumor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ANTIGEN((short)1, "antigen"),
      AMINO_ACID_EXCHANGE((short)2, "aminoAcidExchange"),
      HLA_ALLELE((short)3, "hlaAllele"),
      TRA_CDR3((short)4, "traCDR3"),
      TRAV((short)5, "trav"),
      TRAJ((short)6, "traj"),
      TRB_CDR3((short)7, "trbCDR3"),
      TRBV((short)8, "trbv"),
      TRBJ((short)9, "trbj"),
      TUMOR((short)10, "tumor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ANTIGEN
            return ANTIGEN;
          case 2: // AMINO_ACID_EXCHANGE
            return AMINO_ACID_EXCHANGE;
          case 3: // HLA_ALLELE
            return HLA_ALLELE;
          case 4: // TRA_CDR3
            return TRA_CDR3;
          case 5: // TRAV
            return TRAV;
          case 6: // TRAJ
            return TRAJ;
          case 7: // TRB_CDR3
            return TRB_CDR3;
          case 8: // TRBV
            return TRBV;
          case 9: // TRBJ
            return TRBJ;
          case 10: // TUMOR
            return TUMOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ANTIGEN, new org.apache.thrift.meta_data.FieldMetaData("antigen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.AMINO_ACID_EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("aminoAcidExchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.HLA_ALLELE, new org.apache.thrift.meta_data.FieldMetaData("hlaAllele", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TRA_CDR3, new org.apache.thrift.meta_data.FieldMetaData("traCDR3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TRAV, new org.apache.thrift.meta_data.FieldMetaData("trav", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TRAJ, new org.apache.thrift.meta_data.FieldMetaData("traj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TRB_CDR3, new org.apache.thrift.meta_data.FieldMetaData("trbCDR3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TRBV, new org.apache.thrift.meta_data.FieldMetaData("trbv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TRBJ, new org.apache.thrift.meta_data.FieldMetaData("trbj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TUMOR, new org.apache.thrift.meta_data.FieldMetaData("tumor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCR_args.class, metaDataMap);
    }

    public getTCR_args() {
    }

    public getTCR_args(
      java.util.List<java.lang.String> antigen,
      java.util.List<java.lang.String> aminoAcidExchange,
      java.util.List<java.lang.String> hlaAllele,
      java.util.List<java.lang.String> traCDR3,
      java.util.List<java.lang.String> trav,
      java.util.List<java.lang.String> traj,
      java.util.List<java.lang.String> trbCDR3,
      java.util.List<java.lang.String> trbv,
      java.util.List<java.lang.String> trbj,
      java.util.List<java.lang.String> tumor)
    {
      this();
      this.antigen = antigen;
      this.aminoAcidExchange = aminoAcidExchange;
      this.hlaAllele = hlaAllele;
      this.traCDR3 = traCDR3;
      this.trav = trav;
      this.traj = traj;
      this.trbCDR3 = trbCDR3;
      this.trbv = trbv;
      this.trbj = trbj;
      this.tumor = tumor;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCR_args(getTCR_args other) {
      if (other.isSetAntigen()) {
        java.util.List<java.lang.String> __this__antigen = new java.util.ArrayList<java.lang.String>(other.antigen);
        this.antigen = __this__antigen;
      }
      if (other.isSetAminoAcidExchange()) {
        java.util.List<java.lang.String> __this__aminoAcidExchange = new java.util.ArrayList<java.lang.String>(other.aminoAcidExchange);
        this.aminoAcidExchange = __this__aminoAcidExchange;
      }
      if (other.isSetHlaAllele()) {
        java.util.List<java.lang.String> __this__hlaAllele = new java.util.ArrayList<java.lang.String>(other.hlaAllele);
        this.hlaAllele = __this__hlaAllele;
      }
      if (other.isSetTraCDR3()) {
        java.util.List<java.lang.String> __this__traCDR3 = new java.util.ArrayList<java.lang.String>(other.traCDR3);
        this.traCDR3 = __this__traCDR3;
      }
      if (other.isSetTrav()) {
        java.util.List<java.lang.String> __this__trav = new java.util.ArrayList<java.lang.String>(other.trav);
        this.trav = __this__trav;
      }
      if (other.isSetTraj()) {
        java.util.List<java.lang.String> __this__traj = new java.util.ArrayList<java.lang.String>(other.traj);
        this.traj = __this__traj;
      }
      if (other.isSetTrbCDR3()) {
        java.util.List<java.lang.String> __this__trbCDR3 = new java.util.ArrayList<java.lang.String>(other.trbCDR3);
        this.trbCDR3 = __this__trbCDR3;
      }
      if (other.isSetTrbv()) {
        java.util.List<java.lang.String> __this__trbv = new java.util.ArrayList<java.lang.String>(other.trbv);
        this.trbv = __this__trbv;
      }
      if (other.isSetTrbj()) {
        java.util.List<java.lang.String> __this__trbj = new java.util.ArrayList<java.lang.String>(other.trbj);
        this.trbj = __this__trbj;
      }
      if (other.isSetTumor()) {
        java.util.List<java.lang.String> __this__tumor = new java.util.ArrayList<java.lang.String>(other.tumor);
        this.tumor = __this__tumor;
      }
    }

    @Override
    public getTCR_args deepCopy() {
      return new getTCR_args(this);
    }

    @Override
    public void clear() {
      this.antigen = null;
      this.aminoAcidExchange = null;
      this.hlaAllele = null;
      this.traCDR3 = null;
      this.trav = null;
      this.traj = null;
      this.trbCDR3 = null;
      this.trbv = null;
      this.trbj = null;
      this.tumor = null;
    }

    public int getAntigenSize() {
      return (this.antigen == null) ? 0 : this.antigen.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getAntigenIterator() {
      return (this.antigen == null) ? null : this.antigen.iterator();
    }

    public void addToAntigen(java.lang.String elem) {
      if (this.antigen == null) {
        this.antigen = new java.util.ArrayList<java.lang.String>();
      }
      this.antigen.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getAntigen() {
      return this.antigen;
    }

    public getTCR_args setAntigen(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> antigen) {
      this.antigen = antigen;
      return this;
    }

    public void unsetAntigen() {
      this.antigen = null;
    }

    /** Returns true if field antigen is set (has been assigned a value) and false otherwise */
    public boolean isSetAntigen() {
      return this.antigen != null;
    }

    public void setAntigenIsSet(boolean value) {
      if (!value) {
        this.antigen = null;
      }
    }

    public int getAminoAcidExchangeSize() {
      return (this.aminoAcidExchange == null) ? 0 : this.aminoAcidExchange.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getAminoAcidExchangeIterator() {
      return (this.aminoAcidExchange == null) ? null : this.aminoAcidExchange.iterator();
    }

    public void addToAminoAcidExchange(java.lang.String elem) {
      if (this.aminoAcidExchange == null) {
        this.aminoAcidExchange = new java.util.ArrayList<java.lang.String>();
      }
      this.aminoAcidExchange.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getAminoAcidExchange() {
      return this.aminoAcidExchange;
    }

    public getTCR_args setAminoAcidExchange(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> aminoAcidExchange) {
      this.aminoAcidExchange = aminoAcidExchange;
      return this;
    }

    public void unsetAminoAcidExchange() {
      this.aminoAcidExchange = null;
    }

    /** Returns true if field aminoAcidExchange is set (has been assigned a value) and false otherwise */
    public boolean isSetAminoAcidExchange() {
      return this.aminoAcidExchange != null;
    }

    public void setAminoAcidExchangeIsSet(boolean value) {
      if (!value) {
        this.aminoAcidExchange = null;
      }
    }

    public int getHlaAlleleSize() {
      return (this.hlaAllele == null) ? 0 : this.hlaAllele.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getHlaAlleleIterator() {
      return (this.hlaAllele == null) ? null : this.hlaAllele.iterator();
    }

    public void addToHlaAllele(java.lang.String elem) {
      if (this.hlaAllele == null) {
        this.hlaAllele = new java.util.ArrayList<java.lang.String>();
      }
      this.hlaAllele.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getHlaAllele() {
      return this.hlaAllele;
    }

    public getTCR_args setHlaAllele(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hlaAllele) {
      this.hlaAllele = hlaAllele;
      return this;
    }

    public void unsetHlaAllele() {
      this.hlaAllele = null;
    }

    /** Returns true if field hlaAllele is set (has been assigned a value) and false otherwise */
    public boolean isSetHlaAllele() {
      return this.hlaAllele != null;
    }

    public void setHlaAlleleIsSet(boolean value) {
      if (!value) {
        this.hlaAllele = null;
      }
    }

    public int getTraCDR3Size() {
      return (this.traCDR3 == null) ? 0 : this.traCDR3.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTraCDR3Iterator() {
      return (this.traCDR3 == null) ? null : this.traCDR3.iterator();
    }

    public void addToTraCDR3(java.lang.String elem) {
      if (this.traCDR3 == null) {
        this.traCDR3 = new java.util.ArrayList<java.lang.String>();
      }
      this.traCDR3.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTraCDR3() {
      return this.traCDR3;
    }

    public getTCR_args setTraCDR3(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> traCDR3) {
      this.traCDR3 = traCDR3;
      return this;
    }

    public void unsetTraCDR3() {
      this.traCDR3 = null;
    }

    /** Returns true if field traCDR3 is set (has been assigned a value) and false otherwise */
    public boolean isSetTraCDR3() {
      return this.traCDR3 != null;
    }

    public void setTraCDR3IsSet(boolean value) {
      if (!value) {
        this.traCDR3 = null;
      }
    }

    public int getTravSize() {
      return (this.trav == null) ? 0 : this.trav.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTravIterator() {
      return (this.trav == null) ? null : this.trav.iterator();
    }

    public void addToTrav(java.lang.String elem) {
      if (this.trav == null) {
        this.trav = new java.util.ArrayList<java.lang.String>();
      }
      this.trav.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTrav() {
      return this.trav;
    }

    public getTCR_args setTrav(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trav) {
      this.trav = trav;
      return this;
    }

    public void unsetTrav() {
      this.trav = null;
    }

    /** Returns true if field trav is set (has been assigned a value) and false otherwise */
    public boolean isSetTrav() {
      return this.trav != null;
    }

    public void setTravIsSet(boolean value) {
      if (!value) {
        this.trav = null;
      }
    }

    public int getTrajSize() {
      return (this.traj == null) ? 0 : this.traj.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTrajIterator() {
      return (this.traj == null) ? null : this.traj.iterator();
    }

    public void addToTraj(java.lang.String elem) {
      if (this.traj == null) {
        this.traj = new java.util.ArrayList<java.lang.String>();
      }
      this.traj.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTraj() {
      return this.traj;
    }

    public getTCR_args setTraj(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> traj) {
      this.traj = traj;
      return this;
    }

    public void unsetTraj() {
      this.traj = null;
    }

    /** Returns true if field traj is set (has been assigned a value) and false otherwise */
    public boolean isSetTraj() {
      return this.traj != null;
    }

    public void setTrajIsSet(boolean value) {
      if (!value) {
        this.traj = null;
      }
    }

    public int getTrbCDR3Size() {
      return (this.trbCDR3 == null) ? 0 : this.trbCDR3.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTrbCDR3Iterator() {
      return (this.trbCDR3 == null) ? null : this.trbCDR3.iterator();
    }

    public void addToTrbCDR3(java.lang.String elem) {
      if (this.trbCDR3 == null) {
        this.trbCDR3 = new java.util.ArrayList<java.lang.String>();
      }
      this.trbCDR3.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTrbCDR3() {
      return this.trbCDR3;
    }

    public getTCR_args setTrbCDR3(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trbCDR3) {
      this.trbCDR3 = trbCDR3;
      return this;
    }

    public void unsetTrbCDR3() {
      this.trbCDR3 = null;
    }

    /** Returns true if field trbCDR3 is set (has been assigned a value) and false otherwise */
    public boolean isSetTrbCDR3() {
      return this.trbCDR3 != null;
    }

    public void setTrbCDR3IsSet(boolean value) {
      if (!value) {
        this.trbCDR3 = null;
      }
    }

    public int getTrbvSize() {
      return (this.trbv == null) ? 0 : this.trbv.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTrbvIterator() {
      return (this.trbv == null) ? null : this.trbv.iterator();
    }

    public void addToTrbv(java.lang.String elem) {
      if (this.trbv == null) {
        this.trbv = new java.util.ArrayList<java.lang.String>();
      }
      this.trbv.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTrbv() {
      return this.trbv;
    }

    public getTCR_args setTrbv(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trbv) {
      this.trbv = trbv;
      return this;
    }

    public void unsetTrbv() {
      this.trbv = null;
    }

    /** Returns true if field trbv is set (has been assigned a value) and false otherwise */
    public boolean isSetTrbv() {
      return this.trbv != null;
    }

    public void setTrbvIsSet(boolean value) {
      if (!value) {
        this.trbv = null;
      }
    }

    public int getTrbjSize() {
      return (this.trbj == null) ? 0 : this.trbj.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTrbjIterator() {
      return (this.trbj == null) ? null : this.trbj.iterator();
    }

    public void addToTrbj(java.lang.String elem) {
      if (this.trbj == null) {
        this.trbj = new java.util.ArrayList<java.lang.String>();
      }
      this.trbj.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTrbj() {
      return this.trbj;
    }

    public getTCR_args setTrbj(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> trbj) {
      this.trbj = trbj;
      return this;
    }

    public void unsetTrbj() {
      this.trbj = null;
    }

    /** Returns true if field trbj is set (has been assigned a value) and false otherwise */
    public boolean isSetTrbj() {
      return this.trbj != null;
    }

    public void setTrbjIsSet(boolean value) {
      if (!value) {
        this.trbj = null;
      }
    }

    public int getTumorSize() {
      return (this.tumor == null) ? 0 : this.tumor.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getTumorIterator() {
      return (this.tumor == null) ? null : this.tumor.iterator();
    }

    public void addToTumor(java.lang.String elem) {
      if (this.tumor == null) {
        this.tumor = new java.util.ArrayList<java.lang.String>();
      }
      this.tumor.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getTumor() {
      return this.tumor;
    }

    public getTCR_args setTumor(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tumor) {
      this.tumor = tumor;
      return this;
    }

    public void unsetTumor() {
      this.tumor = null;
    }

    /** Returns true if field tumor is set (has been assigned a value) and false otherwise */
    public boolean isSetTumor() {
      return this.tumor != null;
    }

    public void setTumorIsSet(boolean value) {
      if (!value) {
        this.tumor = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ANTIGEN:
        if (value == null) {
          unsetAntigen();
        } else {
          setAntigen((java.util.List<java.lang.String>)value);
        }
        break;

      case AMINO_ACID_EXCHANGE:
        if (value == null) {
          unsetAminoAcidExchange();
        } else {
          setAminoAcidExchange((java.util.List<java.lang.String>)value);
        }
        break;

      case HLA_ALLELE:
        if (value == null) {
          unsetHlaAllele();
        } else {
          setHlaAllele((java.util.List<java.lang.String>)value);
        }
        break;

      case TRA_CDR3:
        if (value == null) {
          unsetTraCDR3();
        } else {
          setTraCDR3((java.util.List<java.lang.String>)value);
        }
        break;

      case TRAV:
        if (value == null) {
          unsetTrav();
        } else {
          setTrav((java.util.List<java.lang.String>)value);
        }
        break;

      case TRAJ:
        if (value == null) {
          unsetTraj();
        } else {
          setTraj((java.util.List<java.lang.String>)value);
        }
        break;

      case TRB_CDR3:
        if (value == null) {
          unsetTrbCDR3();
        } else {
          setTrbCDR3((java.util.List<java.lang.String>)value);
        }
        break;

      case TRBV:
        if (value == null) {
          unsetTrbv();
        } else {
          setTrbv((java.util.List<java.lang.String>)value);
        }
        break;

      case TRBJ:
        if (value == null) {
          unsetTrbj();
        } else {
          setTrbj((java.util.List<java.lang.String>)value);
        }
        break;

      case TUMOR:
        if (value == null) {
          unsetTumor();
        } else {
          setTumor((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ANTIGEN:
        return getAntigen();

      case AMINO_ACID_EXCHANGE:
        return getAminoAcidExchange();

      case HLA_ALLELE:
        return getHlaAllele();

      case TRA_CDR3:
        return getTraCDR3();

      case TRAV:
        return getTrav();

      case TRAJ:
        return getTraj();

      case TRB_CDR3:
        return getTrbCDR3();

      case TRBV:
        return getTrbv();

      case TRBJ:
        return getTrbj();

      case TUMOR:
        return getTumor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ANTIGEN:
        return isSetAntigen();
      case AMINO_ACID_EXCHANGE:
        return isSetAminoAcidExchange();
      case HLA_ALLELE:
        return isSetHlaAllele();
      case TRA_CDR3:
        return isSetTraCDR3();
      case TRAV:
        return isSetTrav();
      case TRAJ:
        return isSetTraj();
      case TRB_CDR3:
        return isSetTrbCDR3();
      case TRBV:
        return isSetTrbv();
      case TRBJ:
        return isSetTrbj();
      case TUMOR:
        return isSetTumor();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTCR_args)
        return this.equals((getTCR_args)that);
      return false;
    }

    public boolean equals(getTCR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_antigen = true && this.isSetAntigen();
      boolean that_present_antigen = true && that.isSetAntigen();
      if (this_present_antigen || that_present_antigen) {
        if (!(this_present_antigen && that_present_antigen))
          return false;
        if (!this.antigen.equals(that.antigen))
          return false;
      }

      boolean this_present_aminoAcidExchange = true && this.isSetAminoAcidExchange();
      boolean that_present_aminoAcidExchange = true && that.isSetAminoAcidExchange();
      if (this_present_aminoAcidExchange || that_present_aminoAcidExchange) {
        if (!(this_present_aminoAcidExchange && that_present_aminoAcidExchange))
          return false;
        if (!this.aminoAcidExchange.equals(that.aminoAcidExchange))
          return false;
      }

      boolean this_present_hlaAllele = true && this.isSetHlaAllele();
      boolean that_present_hlaAllele = true && that.isSetHlaAllele();
      if (this_present_hlaAllele || that_present_hlaAllele) {
        if (!(this_present_hlaAllele && that_present_hlaAllele))
          return false;
        if (!this.hlaAllele.equals(that.hlaAllele))
          return false;
      }

      boolean this_present_traCDR3 = true && this.isSetTraCDR3();
      boolean that_present_traCDR3 = true && that.isSetTraCDR3();
      if (this_present_traCDR3 || that_present_traCDR3) {
        if (!(this_present_traCDR3 && that_present_traCDR3))
          return false;
        if (!this.traCDR3.equals(that.traCDR3))
          return false;
      }

      boolean this_present_trav = true && this.isSetTrav();
      boolean that_present_trav = true && that.isSetTrav();
      if (this_present_trav || that_present_trav) {
        if (!(this_present_trav && that_present_trav))
          return false;
        if (!this.trav.equals(that.trav))
          return false;
      }

      boolean this_present_traj = true && this.isSetTraj();
      boolean that_present_traj = true && that.isSetTraj();
      if (this_present_traj || that_present_traj) {
        if (!(this_present_traj && that_present_traj))
          return false;
        if (!this.traj.equals(that.traj))
          return false;
      }

      boolean this_present_trbCDR3 = true && this.isSetTrbCDR3();
      boolean that_present_trbCDR3 = true && that.isSetTrbCDR3();
      if (this_present_trbCDR3 || that_present_trbCDR3) {
        if (!(this_present_trbCDR3 && that_present_trbCDR3))
          return false;
        if (!this.trbCDR3.equals(that.trbCDR3))
          return false;
      }

      boolean this_present_trbv = true && this.isSetTrbv();
      boolean that_present_trbv = true && that.isSetTrbv();
      if (this_present_trbv || that_present_trbv) {
        if (!(this_present_trbv && that_present_trbv))
          return false;
        if (!this.trbv.equals(that.trbv))
          return false;
      }

      boolean this_present_trbj = true && this.isSetTrbj();
      boolean that_present_trbj = true && that.isSetTrbj();
      if (this_present_trbj || that_present_trbj) {
        if (!(this_present_trbj && that_present_trbj))
          return false;
        if (!this.trbj.equals(that.trbj))
          return false;
      }

      boolean this_present_tumor = true && this.isSetTumor();
      boolean that_present_tumor = true && that.isSetTumor();
      if (this_present_tumor || that_present_tumor) {
        if (!(this_present_tumor && that_present_tumor))
          return false;
        if (!this.tumor.equals(that.tumor))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAntigen()) ? 131071 : 524287);
      if (isSetAntigen())
        hashCode = hashCode * 8191 + antigen.hashCode();

      hashCode = hashCode * 8191 + ((isSetAminoAcidExchange()) ? 131071 : 524287);
      if (isSetAminoAcidExchange())
        hashCode = hashCode * 8191 + aminoAcidExchange.hashCode();

      hashCode = hashCode * 8191 + ((isSetHlaAllele()) ? 131071 : 524287);
      if (isSetHlaAllele())
        hashCode = hashCode * 8191 + hlaAllele.hashCode();

      hashCode = hashCode * 8191 + ((isSetTraCDR3()) ? 131071 : 524287);
      if (isSetTraCDR3())
        hashCode = hashCode * 8191 + traCDR3.hashCode();

      hashCode = hashCode * 8191 + ((isSetTrav()) ? 131071 : 524287);
      if (isSetTrav())
        hashCode = hashCode * 8191 + trav.hashCode();

      hashCode = hashCode * 8191 + ((isSetTraj()) ? 131071 : 524287);
      if (isSetTraj())
        hashCode = hashCode * 8191 + traj.hashCode();

      hashCode = hashCode * 8191 + ((isSetTrbCDR3()) ? 131071 : 524287);
      if (isSetTrbCDR3())
        hashCode = hashCode * 8191 + trbCDR3.hashCode();

      hashCode = hashCode * 8191 + ((isSetTrbv()) ? 131071 : 524287);
      if (isSetTrbv())
        hashCode = hashCode * 8191 + trbv.hashCode();

      hashCode = hashCode * 8191 + ((isSetTrbj()) ? 131071 : 524287);
      if (isSetTrbj())
        hashCode = hashCode * 8191 + trbj.hashCode();

      hashCode = hashCode * 8191 + ((isSetTumor()) ? 131071 : 524287);
      if (isSetTumor())
        hashCode = hashCode * 8191 + tumor.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTCR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetAntigen(), other.isSetAntigen());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAntigen()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.antigen, other.antigen);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAminoAcidExchange(), other.isSetAminoAcidExchange());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAminoAcidExchange()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aminoAcidExchange, other.aminoAcidExchange);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHlaAllele(), other.isSetHlaAllele());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHlaAllele()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hlaAllele, other.hlaAllele);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTraCDR3(), other.isSetTraCDR3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraCDR3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traCDR3, other.traCDR3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTrav(), other.isSetTrav());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrav()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trav, other.trav);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTraj(), other.isSetTraj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traj, other.traj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTrbCDR3(), other.isSetTrbCDR3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrbCDR3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbCDR3, other.trbCDR3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTrbv(), other.isSetTrbv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrbv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbv, other.trbv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTrbj(), other.isSetTrbj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrbj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbj, other.trbj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetTumor(), other.isSetTumor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTumor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tumor, other.tumor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTCR_args(");
      boolean first = true;

      sb.append("antigen:");
      if (this.antigen == null) {
        sb.append("null");
      } else {
        sb.append(this.antigen);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aminoAcidExchange:");
      if (this.aminoAcidExchange == null) {
        sb.append("null");
      } else {
        sb.append(this.aminoAcidExchange);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hlaAllele:");
      if (this.hlaAllele == null) {
        sb.append("null");
      } else {
        sb.append(this.hlaAllele);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("traCDR3:");
      if (this.traCDR3 == null) {
        sb.append("null");
      } else {
        sb.append(this.traCDR3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("trav:");
      if (this.trav == null) {
        sb.append("null");
      } else {
        sb.append(this.trav);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("traj:");
      if (this.traj == null) {
        sb.append("null");
      } else {
        sb.append(this.traj);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("trbCDR3:");
      if (this.trbCDR3 == null) {
        sb.append("null");
      } else {
        sb.append(this.trbCDR3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("trbv:");
      if (this.trbv == null) {
        sb.append("null");
      } else {
        sb.append(this.trbv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("trbj:");
      if (this.trbj == null) {
        sb.append("null");
      } else {
        sb.append(this.trbj);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tumor:");
      if (this.tumor == null) {
        sb.append("null");
      } else {
        sb.append(this.tumor);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCR_argsStandardScheme getScheme() {
        return new getTCR_argsStandardScheme();
      }
    }

    private static class getTCR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTCR_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ANTIGEN
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.antigen = new java.util.ArrayList<java.lang.String>(_list16.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.antigen.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setAntigenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AMINO_ACID_EXCHANGE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                  struct.aminoAcidExchange = new java.util.ArrayList<java.lang.String>(_list19.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem20;
                  for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                  {
                    _elem20 = iprot.readString();
                    struct.aminoAcidExchange.add(_elem20);
                  }
                  iprot.readListEnd();
                }
                struct.setAminoAcidExchangeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HLA_ALLELE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                  struct.hlaAllele = new java.util.ArrayList<java.lang.String>(_list22.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem23;
                  for (int _i24 = 0; _i24 < _list22.size; ++_i24)
                  {
                    _elem23 = iprot.readString();
                    struct.hlaAllele.add(_elem23);
                  }
                  iprot.readListEnd();
                }
                struct.setHlaAlleleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TRA_CDR3
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list25 = iprot.readListBegin();
                  struct.traCDR3 = new java.util.ArrayList<java.lang.String>(_list25.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem26;
                  for (int _i27 = 0; _i27 < _list25.size; ++_i27)
                  {
                    _elem26 = iprot.readString();
                    struct.traCDR3.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setTraCDR3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TRAV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                  struct.trav = new java.util.ArrayList<java.lang.String>(_list28.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem29;
                  for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                  {
                    _elem29 = iprot.readString();
                    struct.trav.add(_elem29);
                  }
                  iprot.readListEnd();
                }
                struct.setTravIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TRAJ
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                  struct.traj = new java.util.ArrayList<java.lang.String>(_list31.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
                  for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                  {
                    _elem32 = iprot.readString();
                    struct.traj.add(_elem32);
                  }
                  iprot.readListEnd();
                }
                struct.setTrajIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // TRB_CDR3
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                  struct.trbCDR3 = new java.util.ArrayList<java.lang.String>(_list34.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem35;
                  for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                  {
                    _elem35 = iprot.readString();
                    struct.trbCDR3.add(_elem35);
                  }
                  iprot.readListEnd();
                }
                struct.setTrbCDR3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // TRBV
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                  struct.trbv = new java.util.ArrayList<java.lang.String>(_list37.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem38;
                  for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                  {
                    _elem38 = iprot.readString();
                    struct.trbv.add(_elem38);
                  }
                  iprot.readListEnd();
                }
                struct.setTrbvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TRBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.trbj = new java.util.ArrayList<java.lang.String>(_list40.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = iprot.readString();
                    struct.trbj.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setTrbjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // TUMOR
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                  struct.tumor = new java.util.ArrayList<java.lang.String>(_list43.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem44;
                  for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                  {
                    _elem44 = iprot.readString();
                    struct.tumor.add(_elem44);
                  }
                  iprot.readListEnd();
                }
                struct.setTumorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.antigen != null) {
          oprot.writeFieldBegin(ANTIGEN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.antigen.size()));
            for (java.lang.String _iter46 : struct.antigen)
            {
              oprot.writeString(_iter46);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.aminoAcidExchange != null) {
          oprot.writeFieldBegin(AMINO_ACID_EXCHANGE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.aminoAcidExchange.size()));
            for (java.lang.String _iter47 : struct.aminoAcidExchange)
            {
              oprot.writeString(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.hlaAllele != null) {
          oprot.writeFieldBegin(HLA_ALLELE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hlaAllele.size()));
            for (java.lang.String _iter48 : struct.hlaAllele)
            {
              oprot.writeString(_iter48);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.traCDR3 != null) {
          oprot.writeFieldBegin(TRA_CDR3_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.traCDR3.size()));
            for (java.lang.String _iter49 : struct.traCDR3)
            {
              oprot.writeString(_iter49);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.trav != null) {
          oprot.writeFieldBegin(TRAV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.trav.size()));
            for (java.lang.String _iter50 : struct.trav)
            {
              oprot.writeString(_iter50);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.traj != null) {
          oprot.writeFieldBegin(TRAJ_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.traj.size()));
            for (java.lang.String _iter51 : struct.traj)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.trbCDR3 != null) {
          oprot.writeFieldBegin(TRB_CDR3_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.trbCDR3.size()));
            for (java.lang.String _iter52 : struct.trbCDR3)
            {
              oprot.writeString(_iter52);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.trbv != null) {
          oprot.writeFieldBegin(TRBV_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.trbv.size()));
            for (java.lang.String _iter53 : struct.trbv)
            {
              oprot.writeString(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.trbj != null) {
          oprot.writeFieldBegin(TRBJ_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.trbj.size()));
            for (java.lang.String _iter54 : struct.trbj)
            {
              oprot.writeString(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.tumor != null) {
          oprot.writeFieldBegin(TUMOR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tumor.size()));
            for (java.lang.String _iter55 : struct.tumor)
            {
              oprot.writeString(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCR_argsTupleScheme getScheme() {
        return new getTCR_argsTupleScheme();
      }
    }

    private static class getTCR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTCR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAntigen()) {
          optionals.set(0);
        }
        if (struct.isSetAminoAcidExchange()) {
          optionals.set(1);
        }
        if (struct.isSetHlaAllele()) {
          optionals.set(2);
        }
        if (struct.isSetTraCDR3()) {
          optionals.set(3);
        }
        if (struct.isSetTrav()) {
          optionals.set(4);
        }
        if (struct.isSetTraj()) {
          optionals.set(5);
        }
        if (struct.isSetTrbCDR3()) {
          optionals.set(6);
        }
        if (struct.isSetTrbv()) {
          optionals.set(7);
        }
        if (struct.isSetTrbj()) {
          optionals.set(8);
        }
        if (struct.isSetTumor()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetAntigen()) {
          {
            oprot.writeI32(struct.antigen.size());
            for (java.lang.String _iter56 : struct.antigen)
            {
              oprot.writeString(_iter56);
            }
          }
        }
        if (struct.isSetAminoAcidExchange()) {
          {
            oprot.writeI32(struct.aminoAcidExchange.size());
            for (java.lang.String _iter57 : struct.aminoAcidExchange)
            {
              oprot.writeString(_iter57);
            }
          }
        }
        if (struct.isSetHlaAllele()) {
          {
            oprot.writeI32(struct.hlaAllele.size());
            for (java.lang.String _iter58 : struct.hlaAllele)
            {
              oprot.writeString(_iter58);
            }
          }
        }
        if (struct.isSetTraCDR3()) {
          {
            oprot.writeI32(struct.traCDR3.size());
            for (java.lang.String _iter59 : struct.traCDR3)
            {
              oprot.writeString(_iter59);
            }
          }
        }
        if (struct.isSetTrav()) {
          {
            oprot.writeI32(struct.trav.size());
            for (java.lang.String _iter60 : struct.trav)
            {
              oprot.writeString(_iter60);
            }
          }
        }
        if (struct.isSetTraj()) {
          {
            oprot.writeI32(struct.traj.size());
            for (java.lang.String _iter61 : struct.traj)
            {
              oprot.writeString(_iter61);
            }
          }
        }
        if (struct.isSetTrbCDR3()) {
          {
            oprot.writeI32(struct.trbCDR3.size());
            for (java.lang.String _iter62 : struct.trbCDR3)
            {
              oprot.writeString(_iter62);
            }
          }
        }
        if (struct.isSetTrbv()) {
          {
            oprot.writeI32(struct.trbv.size());
            for (java.lang.String _iter63 : struct.trbv)
            {
              oprot.writeString(_iter63);
            }
          }
        }
        if (struct.isSetTrbj()) {
          {
            oprot.writeI32(struct.trbj.size());
            for (java.lang.String _iter64 : struct.trbj)
            {
              oprot.writeString(_iter64);
            }
          }
        }
        if (struct.isSetTumor()) {
          {
            oprot.writeI32(struct.tumor.size());
            for (java.lang.String _iter65 : struct.tumor)
            {
              oprot.writeString(_iter65);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list66 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.antigen = new java.util.ArrayList<java.lang.String>(_list66.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem67;
            for (int _i68 = 0; _i68 < _list66.size; ++_i68)
            {
              _elem67 = iprot.readString();
              struct.antigen.add(_elem67);
            }
          }
          struct.setAntigenIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list69 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.aminoAcidExchange = new java.util.ArrayList<java.lang.String>(_list69.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = iprot.readString();
              struct.aminoAcidExchange.add(_elem70);
            }
          }
          struct.setAminoAcidExchangeIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list72 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.hlaAllele = new java.util.ArrayList<java.lang.String>(_list72.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem73;
            for (int _i74 = 0; _i74 < _list72.size; ++_i74)
            {
              _elem73 = iprot.readString();
              struct.hlaAllele.add(_elem73);
            }
          }
          struct.setHlaAlleleIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list75 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.traCDR3 = new java.util.ArrayList<java.lang.String>(_list75.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem76;
            for (int _i77 = 0; _i77 < _list75.size; ++_i77)
            {
              _elem76 = iprot.readString();
              struct.traCDR3.add(_elem76);
            }
          }
          struct.setTraCDR3IsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list78 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.trav = new java.util.ArrayList<java.lang.String>(_list78.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem79;
            for (int _i80 = 0; _i80 < _list78.size; ++_i80)
            {
              _elem79 = iprot.readString();
              struct.trav.add(_elem79);
            }
          }
          struct.setTravIsSet(true);
        }
        if (incoming.get(5)) {
          {
            org.apache.thrift.protocol.TList _list81 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.traj = new java.util.ArrayList<java.lang.String>(_list81.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem82;
            for (int _i83 = 0; _i83 < _list81.size; ++_i83)
            {
              _elem82 = iprot.readString();
              struct.traj.add(_elem82);
            }
          }
          struct.setTrajIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list84 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.trbCDR3 = new java.util.ArrayList<java.lang.String>(_list84.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem85;
            for (int _i86 = 0; _i86 < _list84.size; ++_i86)
            {
              _elem85 = iprot.readString();
              struct.trbCDR3.add(_elem85);
            }
          }
          struct.setTrbCDR3IsSet(true);
        }
        if (incoming.get(7)) {
          {
            org.apache.thrift.protocol.TList _list87 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.trbv = new java.util.ArrayList<java.lang.String>(_list87.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = iprot.readString();
              struct.trbv.add(_elem88);
            }
          }
          struct.setTrbvIsSet(true);
        }
        if (incoming.get(8)) {
          {
            org.apache.thrift.protocol.TList _list90 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.trbj = new java.util.ArrayList<java.lang.String>(_list90.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem91;
            for (int _i92 = 0; _i92 < _list90.size; ++_i92)
            {
              _elem91 = iprot.readString();
              struct.trbj.add(_elem91);
            }
          }
          struct.setTrbjIsSet(true);
        }
        if (incoming.get(9)) {
          {
            org.apache.thrift.protocol.TList _list93 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.tumor = new java.util.ArrayList<java.lang.String>(_list93.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readString();
              struct.tumor.add(_elem94);
            }
          }
          struct.setTumorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getTCR_result implements org.apache.thrift.TBase<getTCR_result, getTCR_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTCR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTCR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTCR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTCR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeoTCR.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTCR_result.class, metaDataMap);
    }

    public getTCR_result() {
    }

    public getTCR_result(
      java.util.List<NeoTCR> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTCR_result(getTCR_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeoTCR> __this__success = new java.util.ArrayList<NeoTCR>(other.success.size());
        for (NeoTCR other_element : other.success) {
          __this__success.add(new NeoTCR(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getTCR_result deepCopy() {
      return new getTCR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<NeoTCR> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeoTCR elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeoTCR>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<NeoTCR> getSuccess() {
      return this.success;
    }

    public getTCR_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeoTCR>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getTCR_result)
        return this.equals((getTCR_result)that);
      return false;
    }

    public boolean equals(getTCR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTCR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTCR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTCR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCR_resultStandardScheme getScheme() {
        return new getTCR_resultStandardScheme();
      }
    }

    private static class getTCR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTCR_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getTCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeoTCR>(_list96.size);
                  @org.apache.thrift.annotation.Nullable NeoTCR _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new NeoTCR();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getTCR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeoTCR _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTCR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getTCR_resultTupleScheme getScheme() {
        return new getTCR_resultTupleScheme();
      }
    }

    private static class getTCR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTCR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeoTCR _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<NeoTCR>(_list101.size);
            @org.apache.thrift.annotation.Nullable NeoTCR _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new NeoTCR();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getNeo_args implements org.apache.thrift.TBase<getNeo_args, getNeo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNeo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeo_args");

    private static final org.apache.thrift.protocol.TField CDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("cdrs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNeo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNeo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cdrs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CDRS((short)1, "cdrs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CDRS
            return CDRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CDRS, new org.apache.thrift.meta_data.FieldMetaData("cdrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeo_args.class, metaDataMap);
    }

    public getNeo_args() {
    }

    public getNeo_args(
      java.util.List<java.lang.String> cdrs)
    {
      this();
      this.cdrs = cdrs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeo_args(getNeo_args other) {
      if (other.isSetCdrs()) {
        java.util.List<java.lang.String> __this__cdrs = new java.util.ArrayList<java.lang.String>(other.cdrs);
        this.cdrs = __this__cdrs;
      }
    }

    @Override
    public getNeo_args deepCopy() {
      return new getNeo_args(this);
    }

    @Override
    public void clear() {
      this.cdrs = null;
    }

    public int getCdrsSize() {
      return (this.cdrs == null) ? 0 : this.cdrs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCdrsIterator() {
      return (this.cdrs == null) ? null : this.cdrs.iterator();
    }

    public void addToCdrs(java.lang.String elem) {
      if (this.cdrs == null) {
        this.cdrs = new java.util.ArrayList<java.lang.String>();
      }
      this.cdrs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCdrs() {
      return this.cdrs;
    }

    public getNeo_args setCdrs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cdrs) {
      this.cdrs = cdrs;
      return this;
    }

    public void unsetCdrs() {
      this.cdrs = null;
    }

    /** Returns true if field cdrs is set (has been assigned a value) and false otherwise */
    public boolean isSetCdrs() {
      return this.cdrs != null;
    }

    public void setCdrsIsSet(boolean value) {
      if (!value) {
        this.cdrs = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CDRS:
        if (value == null) {
          unsetCdrs();
        } else {
          setCdrs((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CDRS:
        return getCdrs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CDRS:
        return isSetCdrs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getNeo_args)
        return this.equals((getNeo_args)that);
      return false;
    }

    public boolean equals(getNeo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cdrs = true && this.isSetCdrs();
      boolean that_present_cdrs = true && that.isSetCdrs();
      if (this_present_cdrs || that_present_cdrs) {
        if (!(this_present_cdrs && that_present_cdrs))
          return false;
        if (!this.cdrs.equals(that.cdrs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCdrs()) ? 131071 : 524287);
      if (isSetCdrs())
        hashCode = hashCode * 8191 + cdrs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNeo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCdrs(), other.isSetCdrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdrs, other.cdrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNeo_args(");
      boolean first = true;

      sb.append("cdrs:");
      if (this.cdrs == null) {
        sb.append("null");
      } else {
        sb.append(this.cdrs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getNeo_argsStandardScheme getScheme() {
        return new getNeo_argsStandardScheme();
      }
    }

    private static class getNeo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNeo_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CDRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.cdrs = new java.util.ArrayList<java.lang.String>(_list104.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readString();
                    struct.cdrs.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setCdrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cdrs != null) {
          oprot.writeFieldBegin(CDRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cdrs.size()));
            for (java.lang.String _iter107 : struct.cdrs)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getNeo_argsTupleScheme getScheme() {
        return new getNeo_argsTupleScheme();
      }
    }

    private static class getNeo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNeo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCdrs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCdrs()) {
          {
            oprot.writeI32(struct.cdrs.size());
            for (java.lang.String _iter108 : struct.cdrs)
            {
              oprot.writeString(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.cdrs = new java.util.ArrayList<java.lang.String>(_list109.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.cdrs.add(_elem110);
            }
          }
          struct.setCdrsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getNeo_result implements org.apache.thrift.TBase<getNeo_result, getNeo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNeo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNeo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getNeo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getNeo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NeoTCR.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNeo_result.class, metaDataMap);
    }

    public getNeo_result() {
    }

    public getNeo_result(
      java.util.List<NeoTCR> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNeo_result(getNeo_result other) {
      if (other.isSetSuccess()) {
        java.util.List<NeoTCR> __this__success = new java.util.ArrayList<NeoTCR>(other.success.size());
        for (NeoTCR other_element : other.success) {
          __this__success.add(new NeoTCR(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getNeo_result deepCopy() {
      return new getNeo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<NeoTCR> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NeoTCR elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<NeoTCR>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<NeoTCR> getSuccess() {
      return this.success;
    }

    public getNeo_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<NeoTCR> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<NeoTCR>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getNeo_result)
        return this.equals((getNeo_result)that);
      return false;
    }

    public boolean equals(getNeo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getNeo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getNeo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNeo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getNeo_resultStandardScheme getScheme() {
        return new getNeo_resultStandardScheme();
      }
    }

    private static class getNeo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getNeo_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getNeo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<NeoTCR>(_list112.size);
                  @org.apache.thrift.annotation.Nullable NeoTCR _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new NeoTCR();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getNeo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NeoTCR _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNeo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getNeo_resultTupleScheme getScheme() {
        return new getNeo_resultTupleScheme();
      }
    }

    private static class getNeo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getNeo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNeo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NeoTCR _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNeo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<NeoTCR>(_list117.size);
            @org.apache.thrift.annotation.Nullable NeoTCR _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new NeoTCR();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getCDR3TCR_args implements org.apache.thrift.TBase<getCDR3TCR_args, getCDR3TCR_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCDR3TCR_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCDR3TCR_args");

    private static final org.apache.thrift.protocol.TField CDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("cdrs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCDR3TCR_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCDR3TCR_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cdrs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CDRS((short)1, "cdrs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CDRS
            return CDRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CDRS, new org.apache.thrift.meta_data.FieldMetaData("cdrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCDR3TCR_args.class, metaDataMap);
    }

    public getCDR3TCR_args() {
    }

    public getCDR3TCR_args(
      java.util.List<java.lang.String> cdrs)
    {
      this();
      this.cdrs = cdrs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCDR3TCR_args(getCDR3TCR_args other) {
      if (other.isSetCdrs()) {
        java.util.List<java.lang.String> __this__cdrs = new java.util.ArrayList<java.lang.String>(other.cdrs);
        this.cdrs = __this__cdrs;
      }
    }

    @Override
    public getCDR3TCR_args deepCopy() {
      return new getCDR3TCR_args(this);
    }

    @Override
    public void clear() {
      this.cdrs = null;
    }

    public int getCdrsSize() {
      return (this.cdrs == null) ? 0 : this.cdrs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCdrsIterator() {
      return (this.cdrs == null) ? null : this.cdrs.iterator();
    }

    public void addToCdrs(java.lang.String elem) {
      if (this.cdrs == null) {
        this.cdrs = new java.util.ArrayList<java.lang.String>();
      }
      this.cdrs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCdrs() {
      return this.cdrs;
    }

    public getCDR3TCR_args setCdrs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cdrs) {
      this.cdrs = cdrs;
      return this;
    }

    public void unsetCdrs() {
      this.cdrs = null;
    }

    /** Returns true if field cdrs is set (has been assigned a value) and false otherwise */
    public boolean isSetCdrs() {
      return this.cdrs != null;
    }

    public void setCdrsIsSet(boolean value) {
      if (!value) {
        this.cdrs = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CDRS:
        if (value == null) {
          unsetCdrs();
        } else {
          setCdrs((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CDRS:
        return getCdrs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CDRS:
        return isSetCdrs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCDR3TCR_args)
        return this.equals((getCDR3TCR_args)that);
      return false;
    }

    public boolean equals(getCDR3TCR_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cdrs = true && this.isSetCdrs();
      boolean that_present_cdrs = true && that.isSetCdrs();
      if (this_present_cdrs || that_present_cdrs) {
        if (!(this_present_cdrs && that_present_cdrs))
          return false;
        if (!this.cdrs.equals(that.cdrs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCdrs()) ? 131071 : 524287);
      if (isSetCdrs())
        hashCode = hashCode * 8191 + cdrs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCDR3TCR_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCdrs(), other.isSetCdrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdrs, other.cdrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCDR3TCR_args(");
      boolean first = true;

      sb.append("cdrs:");
      if (this.cdrs == null) {
        sb.append("null");
      } else {
        sb.append(this.cdrs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCDR3TCR_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getCDR3TCR_argsStandardScheme getScheme() {
        return new getCDR3TCR_argsStandardScheme();
      }
    }

    private static class getCDR3TCR_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCDR3TCR_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getCDR3TCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CDRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.cdrs = new java.util.ArrayList<java.lang.String>(_list120.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readString();
                    struct.cdrs.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setCdrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getCDR3TCR_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cdrs != null) {
          oprot.writeFieldBegin(CDRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cdrs.size()));
            for (java.lang.String _iter123 : struct.cdrs)
            {
              oprot.writeString(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCDR3TCR_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getCDR3TCR_argsTupleScheme getScheme() {
        return new getCDR3TCR_argsTupleScheme();
      }
    }

    private static class getCDR3TCR_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCDR3TCR_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCDR3TCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCdrs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCdrs()) {
          {
            oprot.writeI32(struct.cdrs.size());
            for (java.lang.String _iter124 : struct.cdrs)
            {
              oprot.writeString(_iter124);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCDR3TCR_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.cdrs = new java.util.ArrayList<java.lang.String>(_list125.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = iprot.readString();
              struct.cdrs.add(_elem126);
            }
          }
          struct.setCdrsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getCDR3TCR_result implements org.apache.thrift.TBase<getCDR3TCR_result, getCDR3TCR_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCDR3TCR_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCDR3TCR_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCDR3TCR_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCDR3TCR_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<CDR3TCR> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CDR3TCR.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCDR3TCR_result.class, metaDataMap);
    }

    public getCDR3TCR_result() {
    }

    public getCDR3TCR_result(
      java.util.List<CDR3TCR> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCDR3TCR_result(getCDR3TCR_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CDR3TCR> __this__success = new java.util.ArrayList<CDR3TCR>(other.success.size());
        for (CDR3TCR other_element : other.success) {
          __this__success.add(new CDR3TCR(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getCDR3TCR_result deepCopy() {
      return new getCDR3TCR_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<CDR3TCR> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CDR3TCR elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CDR3TCR>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<CDR3TCR> getSuccess() {
      return this.success;
    }

    public getCDR3TCR_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<CDR3TCR> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CDR3TCR>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCDR3TCR_result)
        return this.equals((getCDR3TCR_result)that);
      return false;
    }

    public boolean equals(getCDR3TCR_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCDR3TCR_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCDR3TCR_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCDR3TCR_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getCDR3TCR_resultStandardScheme getScheme() {
        return new getCDR3TCR_resultStandardScheme();
      }
    }

    private static class getCDR3TCR_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCDR3TCR_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getCDR3TCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CDR3TCR>(_list128.size);
                  @org.apache.thrift.annotation.Nullable CDR3TCR _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new CDR3TCR();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getCDR3TCR_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CDR3TCR _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCDR3TCR_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getCDR3TCR_resultTupleScheme getScheme() {
        return new getCDR3TCR_resultTupleScheme();
      }
    }

    private static class getCDR3TCR_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCDR3TCR_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCDR3TCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CDR3TCR _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCDR3TCR_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<CDR3TCR>(_list133.size);
            @org.apache.thrift.annotation.Nullable CDR3TCR _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new CDR3TCR();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMcPAS_args implements org.apache.thrift.TBase<getMcPAS_args, getMcPAS_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMcPAS_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMcPAS_args");

    private static final org.apache.thrift.protocol.TField CDRS_FIELD_DESC = new org.apache.thrift.protocol.TField("cdrs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMcPAS_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMcPAS_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cdrs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CDRS((short)1, "cdrs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CDRS
            return CDRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CDRS, new org.apache.thrift.meta_data.FieldMetaData("cdrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMcPAS_args.class, metaDataMap);
    }

    public getMcPAS_args() {
    }

    public getMcPAS_args(
      java.util.List<java.lang.String> cdrs)
    {
      this();
      this.cdrs = cdrs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMcPAS_args(getMcPAS_args other) {
      if (other.isSetCdrs()) {
        java.util.List<java.lang.String> __this__cdrs = new java.util.ArrayList<java.lang.String>(other.cdrs);
        this.cdrs = __this__cdrs;
      }
    }

    @Override
    public getMcPAS_args deepCopy() {
      return new getMcPAS_args(this);
    }

    @Override
    public void clear() {
      this.cdrs = null;
    }

    public int getCdrsSize() {
      return (this.cdrs == null) ? 0 : this.cdrs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getCdrsIterator() {
      return (this.cdrs == null) ? null : this.cdrs.iterator();
    }

    public void addToCdrs(java.lang.String elem) {
      if (this.cdrs == null) {
        this.cdrs = new java.util.ArrayList<java.lang.String>();
      }
      this.cdrs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getCdrs() {
      return this.cdrs;
    }

    public getMcPAS_args setCdrs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> cdrs) {
      this.cdrs = cdrs;
      return this;
    }

    public void unsetCdrs() {
      this.cdrs = null;
    }

    /** Returns true if field cdrs is set (has been assigned a value) and false otherwise */
    public boolean isSetCdrs() {
      return this.cdrs != null;
    }

    public void setCdrsIsSet(boolean value) {
      if (!value) {
        this.cdrs = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CDRS:
        if (value == null) {
          unsetCdrs();
        } else {
          setCdrs((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CDRS:
        return getCdrs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CDRS:
        return isSetCdrs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getMcPAS_args)
        return this.equals((getMcPAS_args)that);
      return false;
    }

    public boolean equals(getMcPAS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cdrs = true && this.isSetCdrs();
      boolean that_present_cdrs = true && that.isSetCdrs();
      if (this_present_cdrs || that_present_cdrs) {
        if (!(this_present_cdrs && that_present_cdrs))
          return false;
        if (!this.cdrs.equals(that.cdrs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCdrs()) ? 131071 : 524287);
      if (isSetCdrs())
        hashCode = hashCode * 8191 + cdrs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMcPAS_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCdrs(), other.isSetCdrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCdrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cdrs, other.cdrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMcPAS_args(");
      boolean first = true;

      sb.append("cdrs:");
      if (this.cdrs == null) {
        sb.append("null");
      } else {
        sb.append(this.cdrs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMcPAS_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMcPAS_argsStandardScheme getScheme() {
        return new getMcPAS_argsStandardScheme();
      }
    }

    private static class getMcPAS_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMcPAS_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMcPAS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CDRS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.cdrs = new java.util.ArrayList<java.lang.String>(_list136.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = iprot.readString();
                    struct.cdrs.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setCdrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMcPAS_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cdrs != null) {
          oprot.writeFieldBegin(CDRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cdrs.size()));
            for (java.lang.String _iter139 : struct.cdrs)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMcPAS_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMcPAS_argsTupleScheme getScheme() {
        return new getMcPAS_argsTupleScheme();
      }
    }

    private static class getMcPAS_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMcPAS_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMcPAS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCdrs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCdrs()) {
          {
            oprot.writeI32(struct.cdrs.size());
            for (java.lang.String _iter140 : struct.cdrs)
            {
              oprot.writeString(_iter140);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMcPAS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.cdrs = new java.util.ArrayList<java.lang.String>(_list141.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = iprot.readString();
              struct.cdrs.add(_elem142);
            }
          }
          struct.setCdrsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getMcPAS_result implements org.apache.thrift.TBase<getMcPAS_result, getMcPAS_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMcPAS_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMcPAS_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMcPAS_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMcPAS_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<McPAS> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, McPAS.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMcPAS_result.class, metaDataMap);
    }

    public getMcPAS_result() {
    }

    public getMcPAS_result(
      java.util.List<McPAS> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMcPAS_result(getMcPAS_result other) {
      if (other.isSetSuccess()) {
        java.util.List<McPAS> __this__success = new java.util.ArrayList<McPAS>(other.success.size());
        for (McPAS other_element : other.success) {
          __this__success.add(new McPAS(other_element));
        }
        this.success = __this__success;
      }
    }

    @Override
    public getMcPAS_result deepCopy() {
      return new getMcPAS_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<McPAS> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(McPAS elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<McPAS>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<McPAS> getSuccess() {
      return this.success;
    }

    public getMcPAS_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<McPAS> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<McPAS>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getMcPAS_result)
        return this.equals((getMcPAS_result)that);
      return false;
    }

    public boolean equals(getMcPAS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMcPAS_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMcPAS_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMcPAS_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMcPAS_resultStandardScheme getScheme() {
        return new getMcPAS_resultStandardScheme();
      }
    }

    private static class getMcPAS_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMcPAS_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getMcPAS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<McPAS>(_list144.size);
                  @org.apache.thrift.annotation.Nullable McPAS _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new McPAS();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getMcPAS_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (McPAS _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMcPAS_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getMcPAS_resultTupleScheme getScheme() {
        return new getMcPAS_resultTupleScheme();
      }
    }

    private static class getMcPAS_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMcPAS_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMcPAS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (McPAS _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMcPAS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<McPAS>(_list149.size);
            @org.apache.thrift.annotation.Nullable McPAS _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new McPAS();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
