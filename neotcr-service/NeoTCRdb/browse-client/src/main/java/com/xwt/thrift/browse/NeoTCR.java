/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xwt.thrift.browse;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-07")
public class NeoTCR implements org.apache.thrift.TBase<NeoTCR, NeoTCR._Fields>, java.io.Serializable, Cloneable, Comparable<NeoTCR> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NeoTCR");

  private static final org.apache.thrift.protocol.TField TUMOR_FIELD_DESC = new org.apache.thrift.protocol.TField("tumor", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CELL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cellType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ANTIGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("antigen", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AMINO_ACID_EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("aminoAcidExchange", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NEOEPITOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("neoepitope", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField HLA_ALLELE_FIELD_DESC = new org.apache.thrift.protocol.TField("hlaAllele", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TRAV_FIELD_DESC = new org.apache.thrift.protocol.TField("trav", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRAJ_FIELD_DESC = new org.apache.thrift.protocol.TField("traj", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TRA_CDR3_FIELD_DESC = new org.apache.thrift.protocol.TField("traCDR3", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRBV_FIELD_DESC = new org.apache.thrift.protocol.TField("trbv", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("trbj", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TRB_CDR3_FIELD_DESC = new org.apache.thrift.protocol.TField("trbCDR3", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PUB_MED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pubMedID", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField NEOFORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("neoformat", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TRA_CDR3FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("traCDR3format", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TRB_CDR3FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("trbCDR3format", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NeoTCRStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NeoTCRTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String tumor; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String source; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String cellType; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String antigen; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String aminoAcidExchange; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String neoepitope; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String hlaAllele; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trav; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String traj; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String traCDR3; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbv; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbj; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbCDR3; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pubMedID; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String neoformat; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String traCDR3format; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbCDR3format; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TUMOR((short)1, "tumor"),
    SOURCE((short)2, "source"),
    CELL_TYPE((short)3, "cellType"),
    ANTIGEN((short)4, "antigen"),
    AMINO_ACID_EXCHANGE((short)5, "aminoAcidExchange"),
    NEOEPITOPE((short)6, "neoepitope"),
    HLA_ALLELE((short)7, "hlaAllele"),
    TRAV((short)8, "trav"),
    TRAJ((short)9, "traj"),
    TRA_CDR3((short)10, "traCDR3"),
    TRBV((short)11, "trbv"),
    TRBJ((short)12, "trbj"),
    TRB_CDR3((short)13, "trbCDR3"),
    PUB_MED_ID((short)14, "pubMedID"),
    NEOFORMAT((short)15, "neoformat"),
    TRA_CDR3FORMAT((short)16, "traCDR3format"),
    TRB_CDR3FORMAT((short)17, "trbCDR3format");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TUMOR
          return TUMOR;
        case 2: // SOURCE
          return SOURCE;
        case 3: // CELL_TYPE
          return CELL_TYPE;
        case 4: // ANTIGEN
          return ANTIGEN;
        case 5: // AMINO_ACID_EXCHANGE
          return AMINO_ACID_EXCHANGE;
        case 6: // NEOEPITOPE
          return NEOEPITOPE;
        case 7: // HLA_ALLELE
          return HLA_ALLELE;
        case 8: // TRAV
          return TRAV;
        case 9: // TRAJ
          return TRAJ;
        case 10: // TRA_CDR3
          return TRA_CDR3;
        case 11: // TRBV
          return TRBV;
        case 12: // TRBJ
          return TRBJ;
        case 13: // TRB_CDR3
          return TRB_CDR3;
        case 14: // PUB_MED_ID
          return PUB_MED_ID;
        case 15: // NEOFORMAT
          return NEOFORMAT;
        case 16: // TRA_CDR3FORMAT
          return TRA_CDR3FORMAT;
        case 17: // TRB_CDR3FORMAT
          return TRB_CDR3FORMAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TUMOR, new org.apache.thrift.meta_data.FieldMetaData("tumor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CELL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cellType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANTIGEN, new org.apache.thrift.meta_data.FieldMetaData("antigen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMINO_ACID_EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("aminoAcidExchange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEOEPITOPE, new org.apache.thrift.meta_data.FieldMetaData("neoepitope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HLA_ALLELE, new org.apache.thrift.meta_data.FieldMetaData("hlaAllele", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAV, new org.apache.thrift.meta_data.FieldMetaData("trav", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAJ, new org.apache.thrift.meta_data.FieldMetaData("traj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRA_CDR3, new org.apache.thrift.meta_data.FieldMetaData("traCDR3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRBV, new org.apache.thrift.meta_data.FieldMetaData("trbv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRBJ, new org.apache.thrift.meta_data.FieldMetaData("trbj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRB_CDR3, new org.apache.thrift.meta_data.FieldMetaData("trbCDR3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_MED_ID, new org.apache.thrift.meta_data.FieldMetaData("pubMedID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEOFORMAT, new org.apache.thrift.meta_data.FieldMetaData("neoformat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRA_CDR3FORMAT, new org.apache.thrift.meta_data.FieldMetaData("traCDR3format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRB_CDR3FORMAT, new org.apache.thrift.meta_data.FieldMetaData("trbCDR3format", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NeoTCR.class, metaDataMap);
  }

  public NeoTCR() {
  }

  public NeoTCR(
    java.lang.String tumor,
    java.lang.String source,
    java.lang.String cellType,
    java.lang.String antigen,
    java.lang.String aminoAcidExchange,
    java.lang.String neoepitope,
    java.lang.String hlaAllele,
    java.lang.String trav,
    java.lang.String traj,
    java.lang.String traCDR3,
    java.lang.String trbv,
    java.lang.String trbj,
    java.lang.String trbCDR3,
    java.lang.String pubMedID,
    java.lang.String neoformat,
    java.lang.String traCDR3format,
    java.lang.String trbCDR3format)
  {
    this();
    this.tumor = tumor;
    this.source = source;
    this.cellType = cellType;
    this.antigen = antigen;
    this.aminoAcidExchange = aminoAcidExchange;
    this.neoepitope = neoepitope;
    this.hlaAllele = hlaAllele;
    this.trav = trav;
    this.traj = traj;
    this.traCDR3 = traCDR3;
    this.trbv = trbv;
    this.trbj = trbj;
    this.trbCDR3 = trbCDR3;
    this.pubMedID = pubMedID;
    this.neoformat = neoformat;
    this.traCDR3format = traCDR3format;
    this.trbCDR3format = trbCDR3format;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NeoTCR(NeoTCR other) {
    if (other.isSetTumor()) {
      this.tumor = other.tumor;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetCellType()) {
      this.cellType = other.cellType;
    }
    if (other.isSetAntigen()) {
      this.antigen = other.antigen;
    }
    if (other.isSetAminoAcidExchange()) {
      this.aminoAcidExchange = other.aminoAcidExchange;
    }
    if (other.isSetNeoepitope()) {
      this.neoepitope = other.neoepitope;
    }
    if (other.isSetHlaAllele()) {
      this.hlaAllele = other.hlaAllele;
    }
    if (other.isSetTrav()) {
      this.trav = other.trav;
    }
    if (other.isSetTraj()) {
      this.traj = other.traj;
    }
    if (other.isSetTraCDR3()) {
      this.traCDR3 = other.traCDR3;
    }
    if (other.isSetTrbv()) {
      this.trbv = other.trbv;
    }
    if (other.isSetTrbj()) {
      this.trbj = other.trbj;
    }
    if (other.isSetTrbCDR3()) {
      this.trbCDR3 = other.trbCDR3;
    }
    if (other.isSetPubMedID()) {
      this.pubMedID = other.pubMedID;
    }
    if (other.isSetNeoformat()) {
      this.neoformat = other.neoformat;
    }
    if (other.isSetTraCDR3format()) {
      this.traCDR3format = other.traCDR3format;
    }
    if (other.isSetTrbCDR3format()) {
      this.trbCDR3format = other.trbCDR3format;
    }
  }

  @Override
  public NeoTCR deepCopy() {
    return new NeoTCR(this);
  }

  @Override
  public void clear() {
    this.tumor = null;
    this.source = null;
    this.cellType = null;
    this.antigen = null;
    this.aminoAcidExchange = null;
    this.neoepitope = null;
    this.hlaAllele = null;
    this.trav = null;
    this.traj = null;
    this.traCDR3 = null;
    this.trbv = null;
    this.trbj = null;
    this.trbCDR3 = null;
    this.pubMedID = null;
    this.neoformat = null;
    this.traCDR3format = null;
    this.trbCDR3format = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTumor() {
    return this.tumor;
  }

  public NeoTCR setTumor(@org.apache.thrift.annotation.Nullable java.lang.String tumor) {
    this.tumor = tumor;
    return this;
  }

  public void unsetTumor() {
    this.tumor = null;
  }

  /** Returns true if field tumor is set (has been assigned a value) and false otherwise */
  public boolean isSetTumor() {
    return this.tumor != null;
  }

  public void setTumorIsSet(boolean value) {
    if (!value) {
      this.tumor = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSource() {
    return this.source;
  }

  public NeoTCR setSource(@org.apache.thrift.annotation.Nullable java.lang.String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCellType() {
    return this.cellType;
  }

  public NeoTCR setCellType(@org.apache.thrift.annotation.Nullable java.lang.String cellType) {
    this.cellType = cellType;
    return this;
  }

  public void unsetCellType() {
    this.cellType = null;
  }

  /** Returns true if field cellType is set (has been assigned a value) and false otherwise */
  public boolean isSetCellType() {
    return this.cellType != null;
  }

  public void setCellTypeIsSet(boolean value) {
    if (!value) {
      this.cellType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAntigen() {
    return this.antigen;
  }

  public NeoTCR setAntigen(@org.apache.thrift.annotation.Nullable java.lang.String antigen) {
    this.antigen = antigen;
    return this;
  }

  public void unsetAntigen() {
    this.antigen = null;
  }

  /** Returns true if field antigen is set (has been assigned a value) and false otherwise */
  public boolean isSetAntigen() {
    return this.antigen != null;
  }

  public void setAntigenIsSet(boolean value) {
    if (!value) {
      this.antigen = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAminoAcidExchange() {
    return this.aminoAcidExchange;
  }

  public NeoTCR setAminoAcidExchange(@org.apache.thrift.annotation.Nullable java.lang.String aminoAcidExchange) {
    this.aminoAcidExchange = aminoAcidExchange;
    return this;
  }

  public void unsetAminoAcidExchange() {
    this.aminoAcidExchange = null;
  }

  /** Returns true if field aminoAcidExchange is set (has been assigned a value) and false otherwise */
  public boolean isSetAminoAcidExchange() {
    return this.aminoAcidExchange != null;
  }

  public void setAminoAcidExchangeIsSet(boolean value) {
    if (!value) {
      this.aminoAcidExchange = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNeoepitope() {
    return this.neoepitope;
  }

  public NeoTCR setNeoepitope(@org.apache.thrift.annotation.Nullable java.lang.String neoepitope) {
    this.neoepitope = neoepitope;
    return this;
  }

  public void unsetNeoepitope() {
    this.neoepitope = null;
  }

  /** Returns true if field neoepitope is set (has been assigned a value) and false otherwise */
  public boolean isSetNeoepitope() {
    return this.neoepitope != null;
  }

  public void setNeoepitopeIsSet(boolean value) {
    if (!value) {
      this.neoepitope = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHlaAllele() {
    return this.hlaAllele;
  }

  public NeoTCR setHlaAllele(@org.apache.thrift.annotation.Nullable java.lang.String hlaAllele) {
    this.hlaAllele = hlaAllele;
    return this;
  }

  public void unsetHlaAllele() {
    this.hlaAllele = null;
  }

  /** Returns true if field hlaAllele is set (has been assigned a value) and false otherwise */
  public boolean isSetHlaAllele() {
    return this.hlaAllele != null;
  }

  public void setHlaAlleleIsSet(boolean value) {
    if (!value) {
      this.hlaAllele = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrav() {
    return this.trav;
  }

  public NeoTCR setTrav(@org.apache.thrift.annotation.Nullable java.lang.String trav) {
    this.trav = trav;
    return this;
  }

  public void unsetTrav() {
    this.trav = null;
  }

  /** Returns true if field trav is set (has been assigned a value) and false otherwise */
  public boolean isSetTrav() {
    return this.trav != null;
  }

  public void setTravIsSet(boolean value) {
    if (!value) {
      this.trav = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraj() {
    return this.traj;
  }

  public NeoTCR setTraj(@org.apache.thrift.annotation.Nullable java.lang.String traj) {
    this.traj = traj;
    return this;
  }

  public void unsetTraj() {
    this.traj = null;
  }

  /** Returns true if field traj is set (has been assigned a value) and false otherwise */
  public boolean isSetTraj() {
    return this.traj != null;
  }

  public void setTrajIsSet(boolean value) {
    if (!value) {
      this.traj = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraCDR3() {
    return this.traCDR3;
  }

  public NeoTCR setTraCDR3(@org.apache.thrift.annotation.Nullable java.lang.String traCDR3) {
    this.traCDR3 = traCDR3;
    return this;
  }

  public void unsetTraCDR3() {
    this.traCDR3 = null;
  }

  /** Returns true if field traCDR3 is set (has been assigned a value) and false otherwise */
  public boolean isSetTraCDR3() {
    return this.traCDR3 != null;
  }

  public void setTraCDR3IsSet(boolean value) {
    if (!value) {
      this.traCDR3 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbv() {
    return this.trbv;
  }

  public NeoTCR setTrbv(@org.apache.thrift.annotation.Nullable java.lang.String trbv) {
    this.trbv = trbv;
    return this;
  }

  public void unsetTrbv() {
    this.trbv = null;
  }

  /** Returns true if field trbv is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbv() {
    return this.trbv != null;
  }

  public void setTrbvIsSet(boolean value) {
    if (!value) {
      this.trbv = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbj() {
    return this.trbj;
  }

  public NeoTCR setTrbj(@org.apache.thrift.annotation.Nullable java.lang.String trbj) {
    this.trbj = trbj;
    return this;
  }

  public void unsetTrbj() {
    this.trbj = null;
  }

  /** Returns true if field trbj is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbj() {
    return this.trbj != null;
  }

  public void setTrbjIsSet(boolean value) {
    if (!value) {
      this.trbj = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbCDR3() {
    return this.trbCDR3;
  }

  public NeoTCR setTrbCDR3(@org.apache.thrift.annotation.Nullable java.lang.String trbCDR3) {
    this.trbCDR3 = trbCDR3;
    return this;
  }

  public void unsetTrbCDR3() {
    this.trbCDR3 = null;
  }

  /** Returns true if field trbCDR3 is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbCDR3() {
    return this.trbCDR3 != null;
  }

  public void setTrbCDR3IsSet(boolean value) {
    if (!value) {
      this.trbCDR3 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPubMedID() {
    return this.pubMedID;
  }

  public NeoTCR setPubMedID(@org.apache.thrift.annotation.Nullable java.lang.String pubMedID) {
    this.pubMedID = pubMedID;
    return this;
  }

  public void unsetPubMedID() {
    this.pubMedID = null;
  }

  /** Returns true if field pubMedID is set (has been assigned a value) and false otherwise */
  public boolean isSetPubMedID() {
    return this.pubMedID != null;
  }

  public void setPubMedIDIsSet(boolean value) {
    if (!value) {
      this.pubMedID = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNeoformat() {
    return this.neoformat;
  }

  public NeoTCR setNeoformat(@org.apache.thrift.annotation.Nullable java.lang.String neoformat) {
    this.neoformat = neoformat;
    return this;
  }

  public void unsetNeoformat() {
    this.neoformat = null;
  }

  /** Returns true if field neoformat is set (has been assigned a value) and false otherwise */
  public boolean isSetNeoformat() {
    return this.neoformat != null;
  }

  public void setNeoformatIsSet(boolean value) {
    if (!value) {
      this.neoformat = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraCDR3format() {
    return this.traCDR3format;
  }

  public NeoTCR setTraCDR3format(@org.apache.thrift.annotation.Nullable java.lang.String traCDR3format) {
    this.traCDR3format = traCDR3format;
    return this;
  }

  public void unsetTraCDR3format() {
    this.traCDR3format = null;
  }

  /** Returns true if field traCDR3format is set (has been assigned a value) and false otherwise */
  public boolean isSetTraCDR3format() {
    return this.traCDR3format != null;
  }

  public void setTraCDR3formatIsSet(boolean value) {
    if (!value) {
      this.traCDR3format = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbCDR3format() {
    return this.trbCDR3format;
  }

  public NeoTCR setTrbCDR3format(@org.apache.thrift.annotation.Nullable java.lang.String trbCDR3format) {
    this.trbCDR3format = trbCDR3format;
    return this;
  }

  public void unsetTrbCDR3format() {
    this.trbCDR3format = null;
  }

  /** Returns true if field trbCDR3format is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbCDR3format() {
    return this.trbCDR3format != null;
  }

  public void setTrbCDR3formatIsSet(boolean value) {
    if (!value) {
      this.trbCDR3format = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TUMOR:
      if (value == null) {
        unsetTumor();
      } else {
        setTumor((java.lang.String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((java.lang.String)value);
      }
      break;

    case CELL_TYPE:
      if (value == null) {
        unsetCellType();
      } else {
        setCellType((java.lang.String)value);
      }
      break;

    case ANTIGEN:
      if (value == null) {
        unsetAntigen();
      } else {
        setAntigen((java.lang.String)value);
      }
      break;

    case AMINO_ACID_EXCHANGE:
      if (value == null) {
        unsetAminoAcidExchange();
      } else {
        setAminoAcidExchange((java.lang.String)value);
      }
      break;

    case NEOEPITOPE:
      if (value == null) {
        unsetNeoepitope();
      } else {
        setNeoepitope((java.lang.String)value);
      }
      break;

    case HLA_ALLELE:
      if (value == null) {
        unsetHlaAllele();
      } else {
        setHlaAllele((java.lang.String)value);
      }
      break;

    case TRAV:
      if (value == null) {
        unsetTrav();
      } else {
        setTrav((java.lang.String)value);
      }
      break;

    case TRAJ:
      if (value == null) {
        unsetTraj();
      } else {
        setTraj((java.lang.String)value);
      }
      break;

    case TRA_CDR3:
      if (value == null) {
        unsetTraCDR3();
      } else {
        setTraCDR3((java.lang.String)value);
      }
      break;

    case TRBV:
      if (value == null) {
        unsetTrbv();
      } else {
        setTrbv((java.lang.String)value);
      }
      break;

    case TRBJ:
      if (value == null) {
        unsetTrbj();
      } else {
        setTrbj((java.lang.String)value);
      }
      break;

    case TRB_CDR3:
      if (value == null) {
        unsetTrbCDR3();
      } else {
        setTrbCDR3((java.lang.String)value);
      }
      break;

    case PUB_MED_ID:
      if (value == null) {
        unsetPubMedID();
      } else {
        setPubMedID((java.lang.String)value);
      }
      break;

    case NEOFORMAT:
      if (value == null) {
        unsetNeoformat();
      } else {
        setNeoformat((java.lang.String)value);
      }
      break;

    case TRA_CDR3FORMAT:
      if (value == null) {
        unsetTraCDR3format();
      } else {
        setTraCDR3format((java.lang.String)value);
      }
      break;

    case TRB_CDR3FORMAT:
      if (value == null) {
        unsetTrbCDR3format();
      } else {
        setTrbCDR3format((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TUMOR:
      return getTumor();

    case SOURCE:
      return getSource();

    case CELL_TYPE:
      return getCellType();

    case ANTIGEN:
      return getAntigen();

    case AMINO_ACID_EXCHANGE:
      return getAminoAcidExchange();

    case NEOEPITOPE:
      return getNeoepitope();

    case HLA_ALLELE:
      return getHlaAllele();

    case TRAV:
      return getTrav();

    case TRAJ:
      return getTraj();

    case TRA_CDR3:
      return getTraCDR3();

    case TRBV:
      return getTrbv();

    case TRBJ:
      return getTrbj();

    case TRB_CDR3:
      return getTrbCDR3();

    case PUB_MED_ID:
      return getPubMedID();

    case NEOFORMAT:
      return getNeoformat();

    case TRA_CDR3FORMAT:
      return getTraCDR3format();

    case TRB_CDR3FORMAT:
      return getTrbCDR3format();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TUMOR:
      return isSetTumor();
    case SOURCE:
      return isSetSource();
    case CELL_TYPE:
      return isSetCellType();
    case ANTIGEN:
      return isSetAntigen();
    case AMINO_ACID_EXCHANGE:
      return isSetAminoAcidExchange();
    case NEOEPITOPE:
      return isSetNeoepitope();
    case HLA_ALLELE:
      return isSetHlaAllele();
    case TRAV:
      return isSetTrav();
    case TRAJ:
      return isSetTraj();
    case TRA_CDR3:
      return isSetTraCDR3();
    case TRBV:
      return isSetTrbv();
    case TRBJ:
      return isSetTrbj();
    case TRB_CDR3:
      return isSetTrbCDR3();
    case PUB_MED_ID:
      return isSetPubMedID();
    case NEOFORMAT:
      return isSetNeoformat();
    case TRA_CDR3FORMAT:
      return isSetTraCDR3format();
    case TRB_CDR3FORMAT:
      return isSetTrbCDR3format();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof NeoTCR)
      return this.equals((NeoTCR)that);
    return false;
  }

  public boolean equals(NeoTCR that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tumor = true && this.isSetTumor();
    boolean that_present_tumor = true && that.isSetTumor();
    if (this_present_tumor || that_present_tumor) {
      if (!(this_present_tumor && that_present_tumor))
        return false;
      if (!this.tumor.equals(that.tumor))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_cellType = true && this.isSetCellType();
    boolean that_present_cellType = true && that.isSetCellType();
    if (this_present_cellType || that_present_cellType) {
      if (!(this_present_cellType && that_present_cellType))
        return false;
      if (!this.cellType.equals(that.cellType))
        return false;
    }

    boolean this_present_antigen = true && this.isSetAntigen();
    boolean that_present_antigen = true && that.isSetAntigen();
    if (this_present_antigen || that_present_antigen) {
      if (!(this_present_antigen && that_present_antigen))
        return false;
      if (!this.antigen.equals(that.antigen))
        return false;
    }

    boolean this_present_aminoAcidExchange = true && this.isSetAminoAcidExchange();
    boolean that_present_aminoAcidExchange = true && that.isSetAminoAcidExchange();
    if (this_present_aminoAcidExchange || that_present_aminoAcidExchange) {
      if (!(this_present_aminoAcidExchange && that_present_aminoAcidExchange))
        return false;
      if (!this.aminoAcidExchange.equals(that.aminoAcidExchange))
        return false;
    }

    boolean this_present_neoepitope = true && this.isSetNeoepitope();
    boolean that_present_neoepitope = true && that.isSetNeoepitope();
    if (this_present_neoepitope || that_present_neoepitope) {
      if (!(this_present_neoepitope && that_present_neoepitope))
        return false;
      if (!this.neoepitope.equals(that.neoepitope))
        return false;
    }

    boolean this_present_hlaAllele = true && this.isSetHlaAllele();
    boolean that_present_hlaAllele = true && that.isSetHlaAllele();
    if (this_present_hlaAllele || that_present_hlaAllele) {
      if (!(this_present_hlaAllele && that_present_hlaAllele))
        return false;
      if (!this.hlaAllele.equals(that.hlaAllele))
        return false;
    }

    boolean this_present_trav = true && this.isSetTrav();
    boolean that_present_trav = true && that.isSetTrav();
    if (this_present_trav || that_present_trav) {
      if (!(this_present_trav && that_present_trav))
        return false;
      if (!this.trav.equals(that.trav))
        return false;
    }

    boolean this_present_traj = true && this.isSetTraj();
    boolean that_present_traj = true && that.isSetTraj();
    if (this_present_traj || that_present_traj) {
      if (!(this_present_traj && that_present_traj))
        return false;
      if (!this.traj.equals(that.traj))
        return false;
    }

    boolean this_present_traCDR3 = true && this.isSetTraCDR3();
    boolean that_present_traCDR3 = true && that.isSetTraCDR3();
    if (this_present_traCDR3 || that_present_traCDR3) {
      if (!(this_present_traCDR3 && that_present_traCDR3))
        return false;
      if (!this.traCDR3.equals(that.traCDR3))
        return false;
    }

    boolean this_present_trbv = true && this.isSetTrbv();
    boolean that_present_trbv = true && that.isSetTrbv();
    if (this_present_trbv || that_present_trbv) {
      if (!(this_present_trbv && that_present_trbv))
        return false;
      if (!this.trbv.equals(that.trbv))
        return false;
    }

    boolean this_present_trbj = true && this.isSetTrbj();
    boolean that_present_trbj = true && that.isSetTrbj();
    if (this_present_trbj || that_present_trbj) {
      if (!(this_present_trbj && that_present_trbj))
        return false;
      if (!this.trbj.equals(that.trbj))
        return false;
    }

    boolean this_present_trbCDR3 = true && this.isSetTrbCDR3();
    boolean that_present_trbCDR3 = true && that.isSetTrbCDR3();
    if (this_present_trbCDR3 || that_present_trbCDR3) {
      if (!(this_present_trbCDR3 && that_present_trbCDR3))
        return false;
      if (!this.trbCDR3.equals(that.trbCDR3))
        return false;
    }

    boolean this_present_pubMedID = true && this.isSetPubMedID();
    boolean that_present_pubMedID = true && that.isSetPubMedID();
    if (this_present_pubMedID || that_present_pubMedID) {
      if (!(this_present_pubMedID && that_present_pubMedID))
        return false;
      if (!this.pubMedID.equals(that.pubMedID))
        return false;
    }

    boolean this_present_neoformat = true && this.isSetNeoformat();
    boolean that_present_neoformat = true && that.isSetNeoformat();
    if (this_present_neoformat || that_present_neoformat) {
      if (!(this_present_neoformat && that_present_neoformat))
        return false;
      if (!this.neoformat.equals(that.neoformat))
        return false;
    }

    boolean this_present_traCDR3format = true && this.isSetTraCDR3format();
    boolean that_present_traCDR3format = true && that.isSetTraCDR3format();
    if (this_present_traCDR3format || that_present_traCDR3format) {
      if (!(this_present_traCDR3format && that_present_traCDR3format))
        return false;
      if (!this.traCDR3format.equals(that.traCDR3format))
        return false;
    }

    boolean this_present_trbCDR3format = true && this.isSetTrbCDR3format();
    boolean that_present_trbCDR3format = true && that.isSetTrbCDR3format();
    if (this_present_trbCDR3format || that_present_trbCDR3format) {
      if (!(this_present_trbCDR3format && that_present_trbCDR3format))
        return false;
      if (!this.trbCDR3format.equals(that.trbCDR3format))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTumor()) ? 131071 : 524287);
    if (isSetTumor())
      hashCode = hashCode * 8191 + tumor.hashCode();

    hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
    if (isSetSource())
      hashCode = hashCode * 8191 + source.hashCode();

    hashCode = hashCode * 8191 + ((isSetCellType()) ? 131071 : 524287);
    if (isSetCellType())
      hashCode = hashCode * 8191 + cellType.hashCode();

    hashCode = hashCode * 8191 + ((isSetAntigen()) ? 131071 : 524287);
    if (isSetAntigen())
      hashCode = hashCode * 8191 + antigen.hashCode();

    hashCode = hashCode * 8191 + ((isSetAminoAcidExchange()) ? 131071 : 524287);
    if (isSetAminoAcidExchange())
      hashCode = hashCode * 8191 + aminoAcidExchange.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeoepitope()) ? 131071 : 524287);
    if (isSetNeoepitope())
      hashCode = hashCode * 8191 + neoepitope.hashCode();

    hashCode = hashCode * 8191 + ((isSetHlaAllele()) ? 131071 : 524287);
    if (isSetHlaAllele())
      hashCode = hashCode * 8191 + hlaAllele.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrav()) ? 131071 : 524287);
    if (isSetTrav())
      hashCode = hashCode * 8191 + trav.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraj()) ? 131071 : 524287);
    if (isSetTraj())
      hashCode = hashCode * 8191 + traj.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraCDR3()) ? 131071 : 524287);
    if (isSetTraCDR3())
      hashCode = hashCode * 8191 + traCDR3.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbv()) ? 131071 : 524287);
    if (isSetTrbv())
      hashCode = hashCode * 8191 + trbv.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbj()) ? 131071 : 524287);
    if (isSetTrbj())
      hashCode = hashCode * 8191 + trbj.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbCDR3()) ? 131071 : 524287);
    if (isSetTrbCDR3())
      hashCode = hashCode * 8191 + trbCDR3.hashCode();

    hashCode = hashCode * 8191 + ((isSetPubMedID()) ? 131071 : 524287);
    if (isSetPubMedID())
      hashCode = hashCode * 8191 + pubMedID.hashCode();

    hashCode = hashCode * 8191 + ((isSetNeoformat()) ? 131071 : 524287);
    if (isSetNeoformat())
      hashCode = hashCode * 8191 + neoformat.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraCDR3format()) ? 131071 : 524287);
    if (isSetTraCDR3format())
      hashCode = hashCode * 8191 + traCDR3format.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbCDR3format()) ? 131071 : 524287);
    if (isSetTrbCDR3format())
      hashCode = hashCode * 8191 + trbCDR3format.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NeoTCR other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTumor(), other.isSetTumor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTumor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tumor, other.tumor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSource(), other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCellType(), other.isSetCellType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCellType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cellType, other.cellType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAntigen(), other.isSetAntigen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAntigen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.antigen, other.antigen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAminoAcidExchange(), other.isSetAminoAcidExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAminoAcidExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aminoAcidExchange, other.aminoAcidExchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeoepitope(), other.isSetNeoepitope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeoepitope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neoepitope, other.neoepitope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHlaAllele(), other.isSetHlaAllele());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHlaAllele()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hlaAllele, other.hlaAllele);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrav(), other.isSetTrav());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrav()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trav, other.trav);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTraj(), other.isSetTraj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traj, other.traj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTraCDR3(), other.isSetTraCDR3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraCDR3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traCDR3, other.traCDR3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbv(), other.isSetTrbv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbv, other.trbv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbj(), other.isSetTrbj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbj, other.trbj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbCDR3(), other.isSetTrbCDR3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbCDR3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbCDR3, other.trbCDR3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPubMedID(), other.isSetPubMedID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubMedID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubMedID, other.pubMedID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNeoformat(), other.isSetNeoformat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeoformat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.neoformat, other.neoformat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTraCDR3format(), other.isSetTraCDR3format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraCDR3format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traCDR3format, other.traCDR3format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbCDR3format(), other.isSetTrbCDR3format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbCDR3format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbCDR3format, other.trbCDR3format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NeoTCR(");
    boolean first = true;

    sb.append("tumor:");
    if (this.tumor == null) {
      sb.append("null");
    } else {
      sb.append(this.tumor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cellType:");
    if (this.cellType == null) {
      sb.append("null");
    } else {
      sb.append(this.cellType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("antigen:");
    if (this.antigen == null) {
      sb.append("null");
    } else {
      sb.append(this.antigen);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aminoAcidExchange:");
    if (this.aminoAcidExchange == null) {
      sb.append("null");
    } else {
      sb.append(this.aminoAcidExchange);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("neoepitope:");
    if (this.neoepitope == null) {
      sb.append("null");
    } else {
      sb.append(this.neoepitope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hlaAllele:");
    if (this.hlaAllele == null) {
      sb.append("null");
    } else {
      sb.append(this.hlaAllele);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trav:");
    if (this.trav == null) {
      sb.append("null");
    } else {
      sb.append(this.trav);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traj:");
    if (this.traj == null) {
      sb.append("null");
    } else {
      sb.append(this.traj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traCDR3:");
    if (this.traCDR3 == null) {
      sb.append("null");
    } else {
      sb.append(this.traCDR3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbv:");
    if (this.trbv == null) {
      sb.append("null");
    } else {
      sb.append(this.trbv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbj:");
    if (this.trbj == null) {
      sb.append("null");
    } else {
      sb.append(this.trbj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbCDR3:");
    if (this.trbCDR3 == null) {
      sb.append("null");
    } else {
      sb.append(this.trbCDR3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubMedID:");
    if (this.pubMedID == null) {
      sb.append("null");
    } else {
      sb.append(this.pubMedID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("neoformat:");
    if (this.neoformat == null) {
      sb.append("null");
    } else {
      sb.append(this.neoformat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traCDR3format:");
    if (this.traCDR3format == null) {
      sb.append("null");
    } else {
      sb.append(this.traCDR3format);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbCDR3format:");
    if (this.trbCDR3format == null) {
      sb.append("null");
    } else {
      sb.append(this.trbCDR3format);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NeoTCRStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NeoTCRStandardScheme getScheme() {
      return new NeoTCRStandardScheme();
    }
  }

  private static class NeoTCRStandardScheme extends org.apache.thrift.scheme.StandardScheme<NeoTCR> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, NeoTCR struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TUMOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tumor = iprot.readString();
              struct.setTumorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CELL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cellType = iprot.readString();
              struct.setCellTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ANTIGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.antigen = iprot.readString();
              struct.setAntigenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMINO_ACID_EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aminoAcidExchange = iprot.readString();
              struct.setAminoAcidExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEOEPITOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.neoepitope = iprot.readString();
              struct.setNeoepitopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HLA_ALLELE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hlaAllele = iprot.readString();
              struct.setHlaAlleleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRAV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trav = iprot.readString();
              struct.setTravIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRAJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traj = iprot.readString();
              struct.setTrajIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRA_CDR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traCDR3 = iprot.readString();
              struct.setTraCDR3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRBV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbv = iprot.readString();
              struct.setTrbvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbj = iprot.readString();
              struct.setTrbjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRB_CDR3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbCDR3 = iprot.readString();
              struct.setTrbCDR3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PUB_MED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubMedID = iprot.readString();
              struct.setPubMedIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NEOFORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.neoformat = iprot.readString();
              struct.setNeoformatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TRA_CDR3FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traCDR3format = iprot.readString();
              struct.setTraCDR3formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TRB_CDR3FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbCDR3format = iprot.readString();
              struct.setTrbCDR3formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, NeoTCR struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tumor != null) {
        oprot.writeFieldBegin(TUMOR_FIELD_DESC);
        oprot.writeString(struct.tumor);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.cellType != null) {
        oprot.writeFieldBegin(CELL_TYPE_FIELD_DESC);
        oprot.writeString(struct.cellType);
        oprot.writeFieldEnd();
      }
      if (struct.antigen != null) {
        oprot.writeFieldBegin(ANTIGEN_FIELD_DESC);
        oprot.writeString(struct.antigen);
        oprot.writeFieldEnd();
      }
      if (struct.aminoAcidExchange != null) {
        oprot.writeFieldBegin(AMINO_ACID_EXCHANGE_FIELD_DESC);
        oprot.writeString(struct.aminoAcidExchange);
        oprot.writeFieldEnd();
      }
      if (struct.neoepitope != null) {
        oprot.writeFieldBegin(NEOEPITOPE_FIELD_DESC);
        oprot.writeString(struct.neoepitope);
        oprot.writeFieldEnd();
      }
      if (struct.hlaAllele != null) {
        oprot.writeFieldBegin(HLA_ALLELE_FIELD_DESC);
        oprot.writeString(struct.hlaAllele);
        oprot.writeFieldEnd();
      }
      if (struct.trav != null) {
        oprot.writeFieldBegin(TRAV_FIELD_DESC);
        oprot.writeString(struct.trav);
        oprot.writeFieldEnd();
      }
      if (struct.traj != null) {
        oprot.writeFieldBegin(TRAJ_FIELD_DESC);
        oprot.writeString(struct.traj);
        oprot.writeFieldEnd();
      }
      if (struct.traCDR3 != null) {
        oprot.writeFieldBegin(TRA_CDR3_FIELD_DESC);
        oprot.writeString(struct.traCDR3);
        oprot.writeFieldEnd();
      }
      if (struct.trbv != null) {
        oprot.writeFieldBegin(TRBV_FIELD_DESC);
        oprot.writeString(struct.trbv);
        oprot.writeFieldEnd();
      }
      if (struct.trbj != null) {
        oprot.writeFieldBegin(TRBJ_FIELD_DESC);
        oprot.writeString(struct.trbj);
        oprot.writeFieldEnd();
      }
      if (struct.trbCDR3 != null) {
        oprot.writeFieldBegin(TRB_CDR3_FIELD_DESC);
        oprot.writeString(struct.trbCDR3);
        oprot.writeFieldEnd();
      }
      if (struct.pubMedID != null) {
        oprot.writeFieldBegin(PUB_MED_ID_FIELD_DESC);
        oprot.writeString(struct.pubMedID);
        oprot.writeFieldEnd();
      }
      if (struct.neoformat != null) {
        oprot.writeFieldBegin(NEOFORMAT_FIELD_DESC);
        oprot.writeString(struct.neoformat);
        oprot.writeFieldEnd();
      }
      if (struct.traCDR3format != null) {
        oprot.writeFieldBegin(TRA_CDR3FORMAT_FIELD_DESC);
        oprot.writeString(struct.traCDR3format);
        oprot.writeFieldEnd();
      }
      if (struct.trbCDR3format != null) {
        oprot.writeFieldBegin(TRB_CDR3FORMAT_FIELD_DESC);
        oprot.writeString(struct.trbCDR3format);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NeoTCRTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NeoTCRTupleScheme getScheme() {
      return new NeoTCRTupleScheme();
    }
  }

  private static class NeoTCRTupleScheme extends org.apache.thrift.scheme.TupleScheme<NeoTCR> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NeoTCR struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTumor()) {
        optionals.set(0);
      }
      if (struct.isSetSource()) {
        optionals.set(1);
      }
      if (struct.isSetCellType()) {
        optionals.set(2);
      }
      if (struct.isSetAntigen()) {
        optionals.set(3);
      }
      if (struct.isSetAminoAcidExchange()) {
        optionals.set(4);
      }
      if (struct.isSetNeoepitope()) {
        optionals.set(5);
      }
      if (struct.isSetHlaAllele()) {
        optionals.set(6);
      }
      if (struct.isSetTrav()) {
        optionals.set(7);
      }
      if (struct.isSetTraj()) {
        optionals.set(8);
      }
      if (struct.isSetTraCDR3()) {
        optionals.set(9);
      }
      if (struct.isSetTrbv()) {
        optionals.set(10);
      }
      if (struct.isSetTrbj()) {
        optionals.set(11);
      }
      if (struct.isSetTrbCDR3()) {
        optionals.set(12);
      }
      if (struct.isSetPubMedID()) {
        optionals.set(13);
      }
      if (struct.isSetNeoformat()) {
        optionals.set(14);
      }
      if (struct.isSetTraCDR3format()) {
        optionals.set(15);
      }
      if (struct.isSetTrbCDR3format()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetTumor()) {
        oprot.writeString(struct.tumor);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetCellType()) {
        oprot.writeString(struct.cellType);
      }
      if (struct.isSetAntigen()) {
        oprot.writeString(struct.antigen);
      }
      if (struct.isSetAminoAcidExchange()) {
        oprot.writeString(struct.aminoAcidExchange);
      }
      if (struct.isSetNeoepitope()) {
        oprot.writeString(struct.neoepitope);
      }
      if (struct.isSetHlaAllele()) {
        oprot.writeString(struct.hlaAllele);
      }
      if (struct.isSetTrav()) {
        oprot.writeString(struct.trav);
      }
      if (struct.isSetTraj()) {
        oprot.writeString(struct.traj);
      }
      if (struct.isSetTraCDR3()) {
        oprot.writeString(struct.traCDR3);
      }
      if (struct.isSetTrbv()) {
        oprot.writeString(struct.trbv);
      }
      if (struct.isSetTrbj()) {
        oprot.writeString(struct.trbj);
      }
      if (struct.isSetTrbCDR3()) {
        oprot.writeString(struct.trbCDR3);
      }
      if (struct.isSetPubMedID()) {
        oprot.writeString(struct.pubMedID);
      }
      if (struct.isSetNeoformat()) {
        oprot.writeString(struct.neoformat);
      }
      if (struct.isSetTraCDR3format()) {
        oprot.writeString(struct.traCDR3format);
      }
      if (struct.isSetTrbCDR3format()) {
        oprot.writeString(struct.trbCDR3format);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NeoTCR struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.tumor = iprot.readString();
        struct.setTumorIsSet(true);
      }
      if (incoming.get(1)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cellType = iprot.readString();
        struct.setCellTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.antigen = iprot.readString();
        struct.setAntigenIsSet(true);
      }
      if (incoming.get(4)) {
        struct.aminoAcidExchange = iprot.readString();
        struct.setAminoAcidExchangeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.neoepitope = iprot.readString();
        struct.setNeoepitopeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hlaAllele = iprot.readString();
        struct.setHlaAlleleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.trav = iprot.readString();
        struct.setTravIsSet(true);
      }
      if (incoming.get(8)) {
        struct.traj = iprot.readString();
        struct.setTrajIsSet(true);
      }
      if (incoming.get(9)) {
        struct.traCDR3 = iprot.readString();
        struct.setTraCDR3IsSet(true);
      }
      if (incoming.get(10)) {
        struct.trbv = iprot.readString();
        struct.setTrbvIsSet(true);
      }
      if (incoming.get(11)) {
        struct.trbj = iprot.readString();
        struct.setTrbjIsSet(true);
      }
      if (incoming.get(12)) {
        struct.trbCDR3 = iprot.readString();
        struct.setTrbCDR3IsSet(true);
      }
      if (incoming.get(13)) {
        struct.pubMedID = iprot.readString();
        struct.setPubMedIDIsSet(true);
      }
      if (incoming.get(14)) {
        struct.neoformat = iprot.readString();
        struct.setNeoformatIsSet(true);
      }
      if (incoming.get(15)) {
        struct.traCDR3format = iprot.readString();
        struct.setTraCDR3formatIsSet(true);
      }
      if (incoming.get(16)) {
        struct.trbCDR3format = iprot.readString();
        struct.setTrbCDR3formatIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

