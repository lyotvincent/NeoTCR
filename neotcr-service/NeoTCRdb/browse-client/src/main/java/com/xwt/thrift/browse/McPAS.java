/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xwt.thrift.browse;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-07")
public class McPAS implements org.apache.thrift.TBase<McPAS, McPAS._Fields>, java.io.Serializable, Cloneable, Comparable<McPAS> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("McPAS");

  private static final org.apache.thrift.protocol.TField CDR3_A_FIELD_DESC = new org.apache.thrift.protocol.TField("CDR3A", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CDR3_B_FIELD_DESC = new org.apache.thrift.protocol.TField("CDR3B", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SPECIES_FIELD_DESC = new org.apache.thrift.protocol.TField("species", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ANTIGEN_FIELD_DESC = new org.apache.thrift.protocol.TField("antigen", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROTEIN_FIELD_DESC = new org.apache.thrift.protocol.TField("protein", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EPITOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("epitope", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MHC_FIELD_DESC = new org.apache.thrift.protocol.TField("mhc", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TRAV_FIELD_DESC = new org.apache.thrift.protocol.TField("trav", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TRAJ_FIELD_DESC = new org.apache.thrift.protocol.TField("traj", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TRBV_FIELD_DESC = new org.apache.thrift.protocol.TField("trbv", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRBD_FIELD_DESC = new org.apache.thrift.protocol.TField("trbd", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TRBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("trbj", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PUBMED_FIELD_DESC = new org.apache.thrift.protocol.TField("pubmed", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new McPASStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new McPASTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String CDR3A; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String CDR3B; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String species; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String category; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String antigen; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String protein; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String epitope; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String mhc; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trav; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String traj; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbv; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbd; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String trbj; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String pubmed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CDR3_A((short)1, "CDR3A"),
    CDR3_B((short)2, "CDR3B"),
    SPECIES((short)3, "species"),
    CATEGORY((short)4, "category"),
    ANTIGEN((short)5, "antigen"),
    PROTEIN((short)6, "protein"),
    EPITOPE((short)7, "epitope"),
    MHC((short)8, "mhc"),
    TRAV((short)9, "trav"),
    TRAJ((short)10, "traj"),
    TRBV((short)11, "trbv"),
    TRBD((short)12, "trbd"),
    TRBJ((short)13, "trbj"),
    PUBMED((short)14, "pubmed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CDR3_A
          return CDR3_A;
        case 2: // CDR3_B
          return CDR3_B;
        case 3: // SPECIES
          return SPECIES;
        case 4: // CATEGORY
          return CATEGORY;
        case 5: // ANTIGEN
          return ANTIGEN;
        case 6: // PROTEIN
          return PROTEIN;
        case 7: // EPITOPE
          return EPITOPE;
        case 8: // MHC
          return MHC;
        case 9: // TRAV
          return TRAV;
        case 10: // TRAJ
          return TRAJ;
        case 11: // TRBV
          return TRBV;
        case 12: // TRBD
          return TRBD;
        case 13: // TRBJ
          return TRBJ;
        case 14: // PUBMED
          return PUBMED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CDR3_A, new org.apache.thrift.meta_data.FieldMetaData("CDR3A", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CDR3_B, new org.apache.thrift.meta_data.FieldMetaData("CDR3B", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPECIES, new org.apache.thrift.meta_data.FieldMetaData("species", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANTIGEN, new org.apache.thrift.meta_data.FieldMetaData("antigen", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROTEIN, new org.apache.thrift.meta_data.FieldMetaData("protein", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EPITOPE, new org.apache.thrift.meta_data.FieldMetaData("epitope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MHC, new org.apache.thrift.meta_data.FieldMetaData("mhc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAV, new org.apache.thrift.meta_data.FieldMetaData("trav", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAJ, new org.apache.thrift.meta_data.FieldMetaData("traj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRBV, new org.apache.thrift.meta_data.FieldMetaData("trbv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRBD, new org.apache.thrift.meta_data.FieldMetaData("trbd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRBJ, new org.apache.thrift.meta_data.FieldMetaData("trbj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBMED, new org.apache.thrift.meta_data.FieldMetaData("pubmed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(McPAS.class, metaDataMap);
  }

  public McPAS() {
  }

  public McPAS(
    java.lang.String CDR3A,
    java.lang.String CDR3B,
    java.lang.String species,
    java.lang.String category,
    java.lang.String antigen,
    java.lang.String protein,
    java.lang.String epitope,
    java.lang.String mhc,
    java.lang.String trav,
    java.lang.String traj,
    java.lang.String trbv,
    java.lang.String trbd,
    java.lang.String trbj,
    java.lang.String pubmed)
  {
    this();
    this.CDR3A = CDR3A;
    this.CDR3B = CDR3B;
    this.species = species;
    this.category = category;
    this.antigen = antigen;
    this.protein = protein;
    this.epitope = epitope;
    this.mhc = mhc;
    this.trav = trav;
    this.traj = traj;
    this.trbv = trbv;
    this.trbd = trbd;
    this.trbj = trbj;
    this.pubmed = pubmed;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public McPAS(McPAS other) {
    if (other.isSetCDR3A()) {
      this.CDR3A = other.CDR3A;
    }
    if (other.isSetCDR3B()) {
      this.CDR3B = other.CDR3B;
    }
    if (other.isSetSpecies()) {
      this.species = other.species;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetAntigen()) {
      this.antigen = other.antigen;
    }
    if (other.isSetProtein()) {
      this.protein = other.protein;
    }
    if (other.isSetEpitope()) {
      this.epitope = other.epitope;
    }
    if (other.isSetMhc()) {
      this.mhc = other.mhc;
    }
    if (other.isSetTrav()) {
      this.trav = other.trav;
    }
    if (other.isSetTraj()) {
      this.traj = other.traj;
    }
    if (other.isSetTrbv()) {
      this.trbv = other.trbv;
    }
    if (other.isSetTrbd()) {
      this.trbd = other.trbd;
    }
    if (other.isSetTrbj()) {
      this.trbj = other.trbj;
    }
    if (other.isSetPubmed()) {
      this.pubmed = other.pubmed;
    }
  }

  @Override
  public McPAS deepCopy() {
    return new McPAS(this);
  }

  @Override
  public void clear() {
    this.CDR3A = null;
    this.CDR3B = null;
    this.species = null;
    this.category = null;
    this.antigen = null;
    this.protein = null;
    this.epitope = null;
    this.mhc = null;
    this.trav = null;
    this.traj = null;
    this.trbv = null;
    this.trbd = null;
    this.trbj = null;
    this.pubmed = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCDR3A() {
    return this.CDR3A;
  }

  public McPAS setCDR3A(@org.apache.thrift.annotation.Nullable java.lang.String CDR3A) {
    this.CDR3A = CDR3A;
    return this;
  }

  public void unsetCDR3A() {
    this.CDR3A = null;
  }

  /** Returns true if field CDR3A is set (has been assigned a value) and false otherwise */
  public boolean isSetCDR3A() {
    return this.CDR3A != null;
  }

  public void setCDR3AIsSet(boolean value) {
    if (!value) {
      this.CDR3A = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCDR3B() {
    return this.CDR3B;
  }

  public McPAS setCDR3B(@org.apache.thrift.annotation.Nullable java.lang.String CDR3B) {
    this.CDR3B = CDR3B;
    return this;
  }

  public void unsetCDR3B() {
    this.CDR3B = null;
  }

  /** Returns true if field CDR3B is set (has been assigned a value) and false otherwise */
  public boolean isSetCDR3B() {
    return this.CDR3B != null;
  }

  public void setCDR3BIsSet(boolean value) {
    if (!value) {
      this.CDR3B = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSpecies() {
    return this.species;
  }

  public McPAS setSpecies(@org.apache.thrift.annotation.Nullable java.lang.String species) {
    this.species = species;
    return this;
  }

  public void unsetSpecies() {
    this.species = null;
  }

  /** Returns true if field species is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecies() {
    return this.species != null;
  }

  public void setSpeciesIsSet(boolean value) {
    if (!value) {
      this.species = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCategory() {
    return this.category;
  }

  public McPAS setCategory(@org.apache.thrift.annotation.Nullable java.lang.String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAntigen() {
    return this.antigen;
  }

  public McPAS setAntigen(@org.apache.thrift.annotation.Nullable java.lang.String antigen) {
    this.antigen = antigen;
    return this;
  }

  public void unsetAntigen() {
    this.antigen = null;
  }

  /** Returns true if field antigen is set (has been assigned a value) and false otherwise */
  public boolean isSetAntigen() {
    return this.antigen != null;
  }

  public void setAntigenIsSet(boolean value) {
    if (!value) {
      this.antigen = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProtein() {
    return this.protein;
  }

  public McPAS setProtein(@org.apache.thrift.annotation.Nullable java.lang.String protein) {
    this.protein = protein;
    return this;
  }

  public void unsetProtein() {
    this.protein = null;
  }

  /** Returns true if field protein is set (has been assigned a value) and false otherwise */
  public boolean isSetProtein() {
    return this.protein != null;
  }

  public void setProteinIsSet(boolean value) {
    if (!value) {
      this.protein = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEpitope() {
    return this.epitope;
  }

  public McPAS setEpitope(@org.apache.thrift.annotation.Nullable java.lang.String epitope) {
    this.epitope = epitope;
    return this;
  }

  public void unsetEpitope() {
    this.epitope = null;
  }

  /** Returns true if field epitope is set (has been assigned a value) and false otherwise */
  public boolean isSetEpitope() {
    return this.epitope != null;
  }

  public void setEpitopeIsSet(boolean value) {
    if (!value) {
      this.epitope = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMhc() {
    return this.mhc;
  }

  public McPAS setMhc(@org.apache.thrift.annotation.Nullable java.lang.String mhc) {
    this.mhc = mhc;
    return this;
  }

  public void unsetMhc() {
    this.mhc = null;
  }

  /** Returns true if field mhc is set (has been assigned a value) and false otherwise */
  public boolean isSetMhc() {
    return this.mhc != null;
  }

  public void setMhcIsSet(boolean value) {
    if (!value) {
      this.mhc = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrav() {
    return this.trav;
  }

  public McPAS setTrav(@org.apache.thrift.annotation.Nullable java.lang.String trav) {
    this.trav = trav;
    return this;
  }

  public void unsetTrav() {
    this.trav = null;
  }

  /** Returns true if field trav is set (has been assigned a value) and false otherwise */
  public boolean isSetTrav() {
    return this.trav != null;
  }

  public void setTravIsSet(boolean value) {
    if (!value) {
      this.trav = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTraj() {
    return this.traj;
  }

  public McPAS setTraj(@org.apache.thrift.annotation.Nullable java.lang.String traj) {
    this.traj = traj;
    return this;
  }

  public void unsetTraj() {
    this.traj = null;
  }

  /** Returns true if field traj is set (has been assigned a value) and false otherwise */
  public boolean isSetTraj() {
    return this.traj != null;
  }

  public void setTrajIsSet(boolean value) {
    if (!value) {
      this.traj = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbv() {
    return this.trbv;
  }

  public McPAS setTrbv(@org.apache.thrift.annotation.Nullable java.lang.String trbv) {
    this.trbv = trbv;
    return this;
  }

  public void unsetTrbv() {
    this.trbv = null;
  }

  /** Returns true if field trbv is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbv() {
    return this.trbv != null;
  }

  public void setTrbvIsSet(boolean value) {
    if (!value) {
      this.trbv = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbd() {
    return this.trbd;
  }

  public McPAS setTrbd(@org.apache.thrift.annotation.Nullable java.lang.String trbd) {
    this.trbd = trbd;
    return this;
  }

  public void unsetTrbd() {
    this.trbd = null;
  }

  /** Returns true if field trbd is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbd() {
    return this.trbd != null;
  }

  public void setTrbdIsSet(boolean value) {
    if (!value) {
      this.trbd = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTrbj() {
    return this.trbj;
  }

  public McPAS setTrbj(@org.apache.thrift.annotation.Nullable java.lang.String trbj) {
    this.trbj = trbj;
    return this;
  }

  public void unsetTrbj() {
    this.trbj = null;
  }

  /** Returns true if field trbj is set (has been assigned a value) and false otherwise */
  public boolean isSetTrbj() {
    return this.trbj != null;
  }

  public void setTrbjIsSet(boolean value) {
    if (!value) {
      this.trbj = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPubmed() {
    return this.pubmed;
  }

  public McPAS setPubmed(@org.apache.thrift.annotation.Nullable java.lang.String pubmed) {
    this.pubmed = pubmed;
    return this;
  }

  public void unsetPubmed() {
    this.pubmed = null;
  }

  /** Returns true if field pubmed is set (has been assigned a value) and false otherwise */
  public boolean isSetPubmed() {
    return this.pubmed != null;
  }

  public void setPubmedIsSet(boolean value) {
    if (!value) {
      this.pubmed = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CDR3_A:
      if (value == null) {
        unsetCDR3A();
      } else {
        setCDR3A((java.lang.String)value);
      }
      break;

    case CDR3_B:
      if (value == null) {
        unsetCDR3B();
      } else {
        setCDR3B((java.lang.String)value);
      }
      break;

    case SPECIES:
      if (value == null) {
        unsetSpecies();
      } else {
        setSpecies((java.lang.String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((java.lang.String)value);
      }
      break;

    case ANTIGEN:
      if (value == null) {
        unsetAntigen();
      } else {
        setAntigen((java.lang.String)value);
      }
      break;

    case PROTEIN:
      if (value == null) {
        unsetProtein();
      } else {
        setProtein((java.lang.String)value);
      }
      break;

    case EPITOPE:
      if (value == null) {
        unsetEpitope();
      } else {
        setEpitope((java.lang.String)value);
      }
      break;

    case MHC:
      if (value == null) {
        unsetMhc();
      } else {
        setMhc((java.lang.String)value);
      }
      break;

    case TRAV:
      if (value == null) {
        unsetTrav();
      } else {
        setTrav((java.lang.String)value);
      }
      break;

    case TRAJ:
      if (value == null) {
        unsetTraj();
      } else {
        setTraj((java.lang.String)value);
      }
      break;

    case TRBV:
      if (value == null) {
        unsetTrbv();
      } else {
        setTrbv((java.lang.String)value);
      }
      break;

    case TRBD:
      if (value == null) {
        unsetTrbd();
      } else {
        setTrbd((java.lang.String)value);
      }
      break;

    case TRBJ:
      if (value == null) {
        unsetTrbj();
      } else {
        setTrbj((java.lang.String)value);
      }
      break;

    case PUBMED:
      if (value == null) {
        unsetPubmed();
      } else {
        setPubmed((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CDR3_A:
      return getCDR3A();

    case CDR3_B:
      return getCDR3B();

    case SPECIES:
      return getSpecies();

    case CATEGORY:
      return getCategory();

    case ANTIGEN:
      return getAntigen();

    case PROTEIN:
      return getProtein();

    case EPITOPE:
      return getEpitope();

    case MHC:
      return getMhc();

    case TRAV:
      return getTrav();

    case TRAJ:
      return getTraj();

    case TRBV:
      return getTrbv();

    case TRBD:
      return getTrbd();

    case TRBJ:
      return getTrbj();

    case PUBMED:
      return getPubmed();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CDR3_A:
      return isSetCDR3A();
    case CDR3_B:
      return isSetCDR3B();
    case SPECIES:
      return isSetSpecies();
    case CATEGORY:
      return isSetCategory();
    case ANTIGEN:
      return isSetAntigen();
    case PROTEIN:
      return isSetProtein();
    case EPITOPE:
      return isSetEpitope();
    case MHC:
      return isSetMhc();
    case TRAV:
      return isSetTrav();
    case TRAJ:
      return isSetTraj();
    case TRBV:
      return isSetTrbv();
    case TRBD:
      return isSetTrbd();
    case TRBJ:
      return isSetTrbj();
    case PUBMED:
      return isSetPubmed();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof McPAS)
      return this.equals((McPAS)that);
    return false;
  }

  public boolean equals(McPAS that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_CDR3A = true && this.isSetCDR3A();
    boolean that_present_CDR3A = true && that.isSetCDR3A();
    if (this_present_CDR3A || that_present_CDR3A) {
      if (!(this_present_CDR3A && that_present_CDR3A))
        return false;
      if (!this.CDR3A.equals(that.CDR3A))
        return false;
    }

    boolean this_present_CDR3B = true && this.isSetCDR3B();
    boolean that_present_CDR3B = true && that.isSetCDR3B();
    if (this_present_CDR3B || that_present_CDR3B) {
      if (!(this_present_CDR3B && that_present_CDR3B))
        return false;
      if (!this.CDR3B.equals(that.CDR3B))
        return false;
    }

    boolean this_present_species = true && this.isSetSpecies();
    boolean that_present_species = true && that.isSetSpecies();
    if (this_present_species || that_present_species) {
      if (!(this_present_species && that_present_species))
        return false;
      if (!this.species.equals(that.species))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_antigen = true && this.isSetAntigen();
    boolean that_present_antigen = true && that.isSetAntigen();
    if (this_present_antigen || that_present_antigen) {
      if (!(this_present_antigen && that_present_antigen))
        return false;
      if (!this.antigen.equals(that.antigen))
        return false;
    }

    boolean this_present_protein = true && this.isSetProtein();
    boolean that_present_protein = true && that.isSetProtein();
    if (this_present_protein || that_present_protein) {
      if (!(this_present_protein && that_present_protein))
        return false;
      if (!this.protein.equals(that.protein))
        return false;
    }

    boolean this_present_epitope = true && this.isSetEpitope();
    boolean that_present_epitope = true && that.isSetEpitope();
    if (this_present_epitope || that_present_epitope) {
      if (!(this_present_epitope && that_present_epitope))
        return false;
      if (!this.epitope.equals(that.epitope))
        return false;
    }

    boolean this_present_mhc = true && this.isSetMhc();
    boolean that_present_mhc = true && that.isSetMhc();
    if (this_present_mhc || that_present_mhc) {
      if (!(this_present_mhc && that_present_mhc))
        return false;
      if (!this.mhc.equals(that.mhc))
        return false;
    }

    boolean this_present_trav = true && this.isSetTrav();
    boolean that_present_trav = true && that.isSetTrav();
    if (this_present_trav || that_present_trav) {
      if (!(this_present_trav && that_present_trav))
        return false;
      if (!this.trav.equals(that.trav))
        return false;
    }

    boolean this_present_traj = true && this.isSetTraj();
    boolean that_present_traj = true && that.isSetTraj();
    if (this_present_traj || that_present_traj) {
      if (!(this_present_traj && that_present_traj))
        return false;
      if (!this.traj.equals(that.traj))
        return false;
    }

    boolean this_present_trbv = true && this.isSetTrbv();
    boolean that_present_trbv = true && that.isSetTrbv();
    if (this_present_trbv || that_present_trbv) {
      if (!(this_present_trbv && that_present_trbv))
        return false;
      if (!this.trbv.equals(that.trbv))
        return false;
    }

    boolean this_present_trbd = true && this.isSetTrbd();
    boolean that_present_trbd = true && that.isSetTrbd();
    if (this_present_trbd || that_present_trbd) {
      if (!(this_present_trbd && that_present_trbd))
        return false;
      if (!this.trbd.equals(that.trbd))
        return false;
    }

    boolean this_present_trbj = true && this.isSetTrbj();
    boolean that_present_trbj = true && that.isSetTrbj();
    if (this_present_trbj || that_present_trbj) {
      if (!(this_present_trbj && that_present_trbj))
        return false;
      if (!this.trbj.equals(that.trbj))
        return false;
    }

    boolean this_present_pubmed = true && this.isSetPubmed();
    boolean that_present_pubmed = true && that.isSetPubmed();
    if (this_present_pubmed || that_present_pubmed) {
      if (!(this_present_pubmed && that_present_pubmed))
        return false;
      if (!this.pubmed.equals(that.pubmed))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCDR3A()) ? 131071 : 524287);
    if (isSetCDR3A())
      hashCode = hashCode * 8191 + CDR3A.hashCode();

    hashCode = hashCode * 8191 + ((isSetCDR3B()) ? 131071 : 524287);
    if (isSetCDR3B())
      hashCode = hashCode * 8191 + CDR3B.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpecies()) ? 131071 : 524287);
    if (isSetSpecies())
      hashCode = hashCode * 8191 + species.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.hashCode();

    hashCode = hashCode * 8191 + ((isSetAntigen()) ? 131071 : 524287);
    if (isSetAntigen())
      hashCode = hashCode * 8191 + antigen.hashCode();

    hashCode = hashCode * 8191 + ((isSetProtein()) ? 131071 : 524287);
    if (isSetProtein())
      hashCode = hashCode * 8191 + protein.hashCode();

    hashCode = hashCode * 8191 + ((isSetEpitope()) ? 131071 : 524287);
    if (isSetEpitope())
      hashCode = hashCode * 8191 + epitope.hashCode();

    hashCode = hashCode * 8191 + ((isSetMhc()) ? 131071 : 524287);
    if (isSetMhc())
      hashCode = hashCode * 8191 + mhc.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrav()) ? 131071 : 524287);
    if (isSetTrav())
      hashCode = hashCode * 8191 + trav.hashCode();

    hashCode = hashCode * 8191 + ((isSetTraj()) ? 131071 : 524287);
    if (isSetTraj())
      hashCode = hashCode * 8191 + traj.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbv()) ? 131071 : 524287);
    if (isSetTrbv())
      hashCode = hashCode * 8191 + trbv.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbd()) ? 131071 : 524287);
    if (isSetTrbd())
      hashCode = hashCode * 8191 + trbd.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrbj()) ? 131071 : 524287);
    if (isSetTrbj())
      hashCode = hashCode * 8191 + trbj.hashCode();

    hashCode = hashCode * 8191 + ((isSetPubmed()) ? 131071 : 524287);
    if (isSetPubmed())
      hashCode = hashCode * 8191 + pubmed.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(McPAS other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCDR3A(), other.isSetCDR3A());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCDR3A()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CDR3A, other.CDR3A);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCDR3B(), other.isSetCDR3B());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCDR3B()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CDR3B, other.CDR3B);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpecies(), other.isSetSpecies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.species, other.species);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCategory(), other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAntigen(), other.isSetAntigen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAntigen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.antigen, other.antigen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProtein(), other.isSetProtein());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtein()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protein, other.protein);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEpitope(), other.isSetEpitope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpitope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epitope, other.epitope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMhc(), other.isSetMhc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMhc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mhc, other.mhc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrav(), other.isSetTrav());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrav()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trav, other.trav);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTraj(), other.isSetTraj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traj, other.traj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbv(), other.isSetTrbv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbv, other.trbv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbd(), other.isSetTrbd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbd, other.trbd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTrbj(), other.isSetTrbj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrbj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trbj, other.trbj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPubmed(), other.isSetPubmed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPubmed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pubmed, other.pubmed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("McPAS(");
    boolean first = true;

    sb.append("CDR3A:");
    if (this.CDR3A == null) {
      sb.append("null");
    } else {
      sb.append(this.CDR3A);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CDR3B:");
    if (this.CDR3B == null) {
      sb.append("null");
    } else {
      sb.append(this.CDR3B);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("species:");
    if (this.species == null) {
      sb.append("null");
    } else {
      sb.append(this.species);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("antigen:");
    if (this.antigen == null) {
      sb.append("null");
    } else {
      sb.append(this.antigen);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protein:");
    if (this.protein == null) {
      sb.append("null");
    } else {
      sb.append(this.protein);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("epitope:");
    if (this.epitope == null) {
      sb.append("null");
    } else {
      sb.append(this.epitope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mhc:");
    if (this.mhc == null) {
      sb.append("null");
    } else {
      sb.append(this.mhc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trav:");
    if (this.trav == null) {
      sb.append("null");
    } else {
      sb.append(this.trav);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traj:");
    if (this.traj == null) {
      sb.append("null");
    } else {
      sb.append(this.traj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbv:");
    if (this.trbv == null) {
      sb.append("null");
    } else {
      sb.append(this.trbv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbd:");
    if (this.trbd == null) {
      sb.append("null");
    } else {
      sb.append(this.trbd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trbj:");
    if (this.trbj == null) {
      sb.append("null");
    } else {
      sb.append(this.trbj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pubmed:");
    if (this.pubmed == null) {
      sb.append("null");
    } else {
      sb.append(this.pubmed);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class McPASStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public McPASStandardScheme getScheme() {
      return new McPASStandardScheme();
    }
  }

  private static class McPASStandardScheme extends org.apache.thrift.scheme.StandardScheme<McPAS> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, McPAS struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CDR3_A
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CDR3A = iprot.readString();
              struct.setCDR3AIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CDR3_B
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CDR3B = iprot.readString();
              struct.setCDR3BIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPECIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.species = iprot.readString();
              struct.setSpeciesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANTIGEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.antigen = iprot.readString();
              struct.setAntigenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROTEIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.protein = iprot.readString();
              struct.setProteinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EPITOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.epitope = iprot.readString();
              struct.setEpitopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MHC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mhc = iprot.readString();
              struct.setMhcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRAV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trav = iprot.readString();
              struct.setTravIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TRAJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traj = iprot.readString();
              struct.setTrajIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRBV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbv = iprot.readString();
              struct.setTrbvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRBD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbd = iprot.readString();
              struct.setTrbdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trbj = iprot.readString();
              struct.setTrbjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PUBMED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pubmed = iprot.readString();
              struct.setPubmedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, McPAS struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.CDR3A != null) {
        oprot.writeFieldBegin(CDR3_A_FIELD_DESC);
        oprot.writeString(struct.CDR3A);
        oprot.writeFieldEnd();
      }
      if (struct.CDR3B != null) {
        oprot.writeFieldBegin(CDR3_B_FIELD_DESC);
        oprot.writeString(struct.CDR3B);
        oprot.writeFieldEnd();
      }
      if (struct.species != null) {
        oprot.writeFieldBegin(SPECIES_FIELD_DESC);
        oprot.writeString(struct.species);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.antigen != null) {
        oprot.writeFieldBegin(ANTIGEN_FIELD_DESC);
        oprot.writeString(struct.antigen);
        oprot.writeFieldEnd();
      }
      if (struct.protein != null) {
        oprot.writeFieldBegin(PROTEIN_FIELD_DESC);
        oprot.writeString(struct.protein);
        oprot.writeFieldEnd();
      }
      if (struct.epitope != null) {
        oprot.writeFieldBegin(EPITOPE_FIELD_DESC);
        oprot.writeString(struct.epitope);
        oprot.writeFieldEnd();
      }
      if (struct.mhc != null) {
        oprot.writeFieldBegin(MHC_FIELD_DESC);
        oprot.writeString(struct.mhc);
        oprot.writeFieldEnd();
      }
      if (struct.trav != null) {
        oprot.writeFieldBegin(TRAV_FIELD_DESC);
        oprot.writeString(struct.trav);
        oprot.writeFieldEnd();
      }
      if (struct.traj != null) {
        oprot.writeFieldBegin(TRAJ_FIELD_DESC);
        oprot.writeString(struct.traj);
        oprot.writeFieldEnd();
      }
      if (struct.trbv != null) {
        oprot.writeFieldBegin(TRBV_FIELD_DESC);
        oprot.writeString(struct.trbv);
        oprot.writeFieldEnd();
      }
      if (struct.trbd != null) {
        oprot.writeFieldBegin(TRBD_FIELD_DESC);
        oprot.writeString(struct.trbd);
        oprot.writeFieldEnd();
      }
      if (struct.trbj != null) {
        oprot.writeFieldBegin(TRBJ_FIELD_DESC);
        oprot.writeString(struct.trbj);
        oprot.writeFieldEnd();
      }
      if (struct.pubmed != null) {
        oprot.writeFieldBegin(PUBMED_FIELD_DESC);
        oprot.writeString(struct.pubmed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class McPASTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public McPASTupleScheme getScheme() {
      return new McPASTupleScheme();
    }
  }

  private static class McPASTupleScheme extends org.apache.thrift.scheme.TupleScheme<McPAS> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, McPAS struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCDR3A()) {
        optionals.set(0);
      }
      if (struct.isSetCDR3B()) {
        optionals.set(1);
      }
      if (struct.isSetSpecies()) {
        optionals.set(2);
      }
      if (struct.isSetCategory()) {
        optionals.set(3);
      }
      if (struct.isSetAntigen()) {
        optionals.set(4);
      }
      if (struct.isSetProtein()) {
        optionals.set(5);
      }
      if (struct.isSetEpitope()) {
        optionals.set(6);
      }
      if (struct.isSetMhc()) {
        optionals.set(7);
      }
      if (struct.isSetTrav()) {
        optionals.set(8);
      }
      if (struct.isSetTraj()) {
        optionals.set(9);
      }
      if (struct.isSetTrbv()) {
        optionals.set(10);
      }
      if (struct.isSetTrbd()) {
        optionals.set(11);
      }
      if (struct.isSetTrbj()) {
        optionals.set(12);
      }
      if (struct.isSetPubmed()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetCDR3A()) {
        oprot.writeString(struct.CDR3A);
      }
      if (struct.isSetCDR3B()) {
        oprot.writeString(struct.CDR3B);
      }
      if (struct.isSetSpecies()) {
        oprot.writeString(struct.species);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetAntigen()) {
        oprot.writeString(struct.antigen);
      }
      if (struct.isSetProtein()) {
        oprot.writeString(struct.protein);
      }
      if (struct.isSetEpitope()) {
        oprot.writeString(struct.epitope);
      }
      if (struct.isSetMhc()) {
        oprot.writeString(struct.mhc);
      }
      if (struct.isSetTrav()) {
        oprot.writeString(struct.trav);
      }
      if (struct.isSetTraj()) {
        oprot.writeString(struct.traj);
      }
      if (struct.isSetTrbv()) {
        oprot.writeString(struct.trbv);
      }
      if (struct.isSetTrbd()) {
        oprot.writeString(struct.trbd);
      }
      if (struct.isSetTrbj()) {
        oprot.writeString(struct.trbj);
      }
      if (struct.isSetPubmed()) {
        oprot.writeString(struct.pubmed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, McPAS struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.CDR3A = iprot.readString();
        struct.setCDR3AIsSet(true);
      }
      if (incoming.get(1)) {
        struct.CDR3B = iprot.readString();
        struct.setCDR3BIsSet(true);
      }
      if (incoming.get(2)) {
        struct.species = iprot.readString();
        struct.setSpeciesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.antigen = iprot.readString();
        struct.setAntigenIsSet(true);
      }
      if (incoming.get(5)) {
        struct.protein = iprot.readString();
        struct.setProteinIsSet(true);
      }
      if (incoming.get(6)) {
        struct.epitope = iprot.readString();
        struct.setEpitopeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mhc = iprot.readString();
        struct.setMhcIsSet(true);
      }
      if (incoming.get(8)) {
        struct.trav = iprot.readString();
        struct.setTravIsSet(true);
      }
      if (incoming.get(9)) {
        struct.traj = iprot.readString();
        struct.setTrajIsSet(true);
      }
      if (incoming.get(10)) {
        struct.trbv = iprot.readString();
        struct.setTrbvIsSet(true);
      }
      if (incoming.get(11)) {
        struct.trbd = iprot.readString();
        struct.setTrbdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.trbj = iprot.readString();
        struct.setTrbjIsSet(true);
      }
      if (incoming.get(13)) {
        struct.pubmed = iprot.readString();
        struct.setPubmedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

