/**
 * Autogenerated by Thrift Compiler (0.17.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xwt.thrift.analyse;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.17.0)", date = "2023-02-12")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class AnalyseService {

  public interface Iface {

    public boolean getAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException;

    public boolean getDNAAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException;

    public boolean getUMIAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String umi, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException;

    public java.lang.String conversion(java.lang.String fileName) throws org.apache.thrift.TException;

    public boolean exampleTRA() throws org.apache.thrift.TException;

    public boolean exampleTRB() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getDNAAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getUMIAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String umi, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void conversion(java.lang.String fileName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void exampleTRA(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void exampleTRB(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public boolean getAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException
    {
      send_getAnalyse(filename1, filename2, outpath, chain);
      return recv_getAnalyse();
    }

    public void send_getAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException
    {
      getAnalyse_args args = new getAnalyse_args();
      args.setFilename1(filename1);
      args.setFilename2(filename2);
      args.setOutpath(outpath);
      args.setChain(chain);
      sendBase("getAnalyse", args);
    }

    public boolean recv_getAnalyse() throws org.apache.thrift.TException
    {
      getAnalyse_result result = new getAnalyse_result();
      receiveBase(result, "getAnalyse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAnalyse failed: unknown result");
    }

    @Override
    public boolean getDNAAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException
    {
      send_getDNAAnalyse(filename1, filename2, outpath, chain);
      return recv_getDNAAnalyse();
    }

    public void send_getDNAAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException
    {
      getDNAAnalyse_args args = new getDNAAnalyse_args();
      args.setFilename1(filename1);
      args.setFilename2(filename2);
      args.setOutpath(outpath);
      args.setChain(chain);
      sendBase("getDNAAnalyse", args);
    }

    public boolean recv_getDNAAnalyse() throws org.apache.thrift.TException
    {
      getDNAAnalyse_result result = new getDNAAnalyse_result();
      receiveBase(result, "getDNAAnalyse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDNAAnalyse failed: unknown result");
    }

    @Override
    public boolean getUMIAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String umi, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException
    {
      send_getUMIAnalyse(filename1, filename2, umi, outpath, chain);
      return recv_getUMIAnalyse();
    }

    public void send_getUMIAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String umi, java.lang.String outpath, java.lang.String chain) throws org.apache.thrift.TException
    {
      getUMIAnalyse_args args = new getUMIAnalyse_args();
      args.setFilename1(filename1);
      args.setFilename2(filename2);
      args.setUmi(umi);
      args.setOutpath(outpath);
      args.setChain(chain);
      sendBase("getUMIAnalyse", args);
    }

    public boolean recv_getUMIAnalyse() throws org.apache.thrift.TException
    {
      getUMIAnalyse_result result = new getUMIAnalyse_result();
      receiveBase(result, "getUMIAnalyse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUMIAnalyse failed: unknown result");
    }

    @Override
    public java.lang.String conversion(java.lang.String fileName) throws org.apache.thrift.TException
    {
      send_conversion(fileName);
      return recv_conversion();
    }

    public void send_conversion(java.lang.String fileName) throws org.apache.thrift.TException
    {
      conversion_args args = new conversion_args();
      args.setFileName(fileName);
      sendBase("conversion", args);
    }

    public java.lang.String recv_conversion() throws org.apache.thrift.TException
    {
      conversion_result result = new conversion_result();
      receiveBase(result, "conversion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "conversion failed: unknown result");
    }

    @Override
    public boolean exampleTRA() throws org.apache.thrift.TException
    {
      send_exampleTRA();
      return recv_exampleTRA();
    }

    public void send_exampleTRA() throws org.apache.thrift.TException
    {
      exampleTRA_args args = new exampleTRA_args();
      sendBase("exampleTRA", args);
    }

    public boolean recv_exampleTRA() throws org.apache.thrift.TException
    {
      exampleTRA_result result = new exampleTRA_result();
      receiveBase(result, "exampleTRA");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exampleTRA failed: unknown result");
    }

    @Override
    public boolean exampleTRB() throws org.apache.thrift.TException
    {
      send_exampleTRB();
      return recv_exampleTRB();
    }

    public void send_exampleTRB() throws org.apache.thrift.TException
    {
      exampleTRB_args args = new exampleTRB_args();
      sendBase("exampleTRB", args);
    }

    public boolean recv_exampleTRB() throws org.apache.thrift.TException
    {
      exampleTRB_result result = new exampleTRB_result();
      receiveBase(result, "exampleTRB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exampleTRB failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void getAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAnalyse_call method_call = new getAnalyse_call(filename1, filename2, outpath, chain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAnalyse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String filename1;
      private java.lang.String filename2;
      private java.lang.String outpath;
      private java.lang.String chain;
      public getAnalyse_call(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename1 = filename1;
        this.filename2 = filename2;
        this.outpath = outpath;
        this.chain = chain;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAnalyse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAnalyse_args args = new getAnalyse_args();
        args.setFilename1(filename1);
        args.setFilename2(filename2);
        args.setOutpath(outpath);
        args.setChain(chain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAnalyse();
      }
    }

    @Override
    public void getDNAAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDNAAnalyse_call method_call = new getDNAAnalyse_call(filename1, filename2, outpath, chain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDNAAnalyse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String filename1;
      private java.lang.String filename2;
      private java.lang.String outpath;
      private java.lang.String chain;
      public getDNAAnalyse_call(java.lang.String filename1, java.lang.String filename2, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename1 = filename1;
        this.filename2 = filename2;
        this.outpath = outpath;
        this.chain = chain;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDNAAnalyse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDNAAnalyse_args args = new getDNAAnalyse_args();
        args.setFilename1(filename1);
        args.setFilename2(filename2);
        args.setOutpath(outpath);
        args.setChain(chain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDNAAnalyse();
      }
    }

    @Override
    public void getUMIAnalyse(java.lang.String filename1, java.lang.String filename2, java.lang.String umi, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUMIAnalyse_call method_call = new getUMIAnalyse_call(filename1, filename2, umi, outpath, chain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUMIAnalyse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String filename1;
      private java.lang.String filename2;
      private java.lang.String umi;
      private java.lang.String outpath;
      private java.lang.String chain;
      public getUMIAnalyse_call(java.lang.String filename1, java.lang.String filename2, java.lang.String umi, java.lang.String outpath, java.lang.String chain, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename1 = filename1;
        this.filename2 = filename2;
        this.umi = umi;
        this.outpath = outpath;
        this.chain = chain;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUMIAnalyse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUMIAnalyse_args args = new getUMIAnalyse_args();
        args.setFilename1(filename1);
        args.setFilename2(filename2);
        args.setUmi(umi);
        args.setOutpath(outpath);
        args.setChain(chain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUMIAnalyse();
      }
    }

    @Override
    public void conversion(java.lang.String fileName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      conversion_call method_call = new conversion_call(fileName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class conversion_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fileName;
      public conversion_call(java.lang.String fileName, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("conversion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        conversion_args args = new conversion_args();
        args.setFileName(fileName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_conversion();
      }
    }

    @Override
    public void exampleTRA(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exampleTRA_call method_call = new exampleTRA_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exampleTRA_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public exampleTRA_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exampleTRA", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exampleTRA_args args = new exampleTRA_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exampleTRA();
      }
    }

    @Override
    public void exampleTRB(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exampleTRB_call method_call = new exampleTRB_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exampleTRB_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public exampleTRB_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exampleTRB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exampleTRB_args args = new exampleTRB_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exampleTRB();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAnalyse", new getAnalyse());
      processMap.put("getDNAAnalyse", new getDNAAnalyse());
      processMap.put("getUMIAnalyse", new getUMIAnalyse());
      processMap.put("conversion", new conversion());
      processMap.put("exampleTRA", new exampleTRA());
      processMap.put("exampleTRB", new exampleTRB());
      return processMap;
    }

    public static class getAnalyse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAnalyse_args> {
      public getAnalyse() {
        super("getAnalyse");
      }

      @Override
      public getAnalyse_args getEmptyArgsInstance() {
        return new getAnalyse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getAnalyse_result getResult(I iface, getAnalyse_args args) throws org.apache.thrift.TException {
        getAnalyse_result result = new getAnalyse_result();
        result.success = iface.getAnalyse(args.filename1, args.filename2, args.outpath, args.chain);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDNAAnalyse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDNAAnalyse_args> {
      public getDNAAnalyse() {
        super("getDNAAnalyse");
      }

      @Override
      public getDNAAnalyse_args getEmptyArgsInstance() {
        return new getDNAAnalyse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getDNAAnalyse_result getResult(I iface, getDNAAnalyse_args args) throws org.apache.thrift.TException {
        getDNAAnalyse_result result = new getDNAAnalyse_result();
        result.success = iface.getDNAAnalyse(args.filename1, args.filename2, args.outpath, args.chain);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getUMIAnalyse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUMIAnalyse_args> {
      public getUMIAnalyse() {
        super("getUMIAnalyse");
      }

      @Override
      public getUMIAnalyse_args getEmptyArgsInstance() {
        return new getUMIAnalyse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getUMIAnalyse_result getResult(I iface, getUMIAnalyse_args args) throws org.apache.thrift.TException {
        getUMIAnalyse_result result = new getUMIAnalyse_result();
        result.success = iface.getUMIAnalyse(args.filename1, args.filename2, args.umi, args.outpath, args.chain);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class conversion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, conversion_args> {
      public conversion() {
        super("conversion");
      }

      @Override
      public conversion_args getEmptyArgsInstance() {
        return new conversion_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public conversion_result getResult(I iface, conversion_args args) throws org.apache.thrift.TException {
        conversion_result result = new conversion_result();
        result.success = iface.conversion(args.fileName);
        return result;
      }
    }

    public static class exampleTRA<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exampleTRA_args> {
      public exampleTRA() {
        super("exampleTRA");
      }

      @Override
      public exampleTRA_args getEmptyArgsInstance() {
        return new exampleTRA_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public exampleTRA_result getResult(I iface, exampleTRA_args args) throws org.apache.thrift.TException {
        exampleTRA_result result = new exampleTRA_result();
        result.success = iface.exampleTRA();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class exampleTRB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exampleTRB_args> {
      public exampleTRB() {
        super("exampleTRB");
      }

      @Override
      public exampleTRB_args getEmptyArgsInstance() {
        return new exampleTRB_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public exampleTRB_result getResult(I iface, exampleTRB_args args) throws org.apache.thrift.TException {
        exampleTRB_result result = new exampleTRB_result();
        result.success = iface.exampleTRB();
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAnalyse", new getAnalyse());
      processMap.put("getDNAAnalyse", new getDNAAnalyse());
      processMap.put("getUMIAnalyse", new getUMIAnalyse());
      processMap.put("conversion", new conversion());
      processMap.put("exampleTRA", new exampleTRA());
      processMap.put("exampleTRB", new exampleTRB());
      return processMap;
    }

    public static class getAnalyse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAnalyse_args, java.lang.Boolean> {
      public getAnalyse() {
        super("getAnalyse");
      }

      @Override
      public getAnalyse_args getEmptyArgsInstance() {
        return new getAnalyse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            getAnalyse_result result = new getAnalyse_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAnalyse_result result = new getAnalyse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getAnalyse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.getAnalyse(args.filename1, args.filename2, args.outpath, args.chain,resultHandler);
      }
    }

    public static class getDNAAnalyse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDNAAnalyse_args, java.lang.Boolean> {
      public getDNAAnalyse() {
        super("getDNAAnalyse");
      }

      @Override
      public getDNAAnalyse_args getEmptyArgsInstance() {
        return new getDNAAnalyse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            getDNAAnalyse_result result = new getDNAAnalyse_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDNAAnalyse_result result = new getDNAAnalyse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getDNAAnalyse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.getDNAAnalyse(args.filename1, args.filename2, args.outpath, args.chain,resultHandler);
      }
    }

    public static class getUMIAnalyse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUMIAnalyse_args, java.lang.Boolean> {
      public getUMIAnalyse() {
        super("getUMIAnalyse");
      }

      @Override
      public getUMIAnalyse_args getEmptyArgsInstance() {
        return new getUMIAnalyse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            getUMIAnalyse_result result = new getUMIAnalyse_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUMIAnalyse_result result = new getUMIAnalyse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getUMIAnalyse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.getUMIAnalyse(args.filename1, args.filename2, args.umi, args.outpath, args.chain,resultHandler);
      }
    }

    public static class conversion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, conversion_args, java.lang.String> {
      public conversion() {
        super("conversion");
      }

      @Override
      public conversion_args getEmptyArgsInstance() {
        return new conversion_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            conversion_result result = new conversion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            conversion_result result = new conversion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, conversion_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.conversion(args.fileName,resultHandler);
      }
    }

    public static class exampleTRA<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exampleTRA_args, java.lang.Boolean> {
      public exampleTRA() {
        super("exampleTRA");
      }

      @Override
      public exampleTRA_args getEmptyArgsInstance() {
        return new exampleTRA_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            exampleTRA_result result = new exampleTRA_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            exampleTRA_result result = new exampleTRA_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, exampleTRA_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.exampleTRA(resultHandler);
      }
    }

    public static class exampleTRB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exampleTRB_args, java.lang.Boolean> {
      public exampleTRB() {
        super("exampleTRB");
      }

      @Override
      public exampleTRB_args getEmptyArgsInstance() {
        return new exampleTRB_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          @Override
          public void onComplete(java.lang.Boolean o) {
            exampleTRB_result result = new exampleTRB_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            exampleTRB_result result = new exampleTRB_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, exampleTRB_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.exampleTRB(resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAnalyse_args implements org.apache.thrift.TBase<getAnalyse_args, getAnalyse_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAnalyse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAnalyse_args");

    private static final org.apache.thrift.protocol.TField FILENAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("filename1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("filename2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outpath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("chain", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAnalyse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAnalyse_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String filename1; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String filename2; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String outpath; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String chain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME1((short)1, "filename1"),
      FILENAME2((short)2, "filename2"),
      OUTPATH((short)3, "outpath"),
      CHAIN((short)4, "chain");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME1
            return FILENAME1;
          case 2: // FILENAME2
            return FILENAME2;
          case 3: // OUTPATH
            return OUTPATH;
          case 4: // CHAIN
            return CHAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME1, new org.apache.thrift.meta_data.FieldMetaData("filename1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME2, new org.apache.thrift.meta_data.FieldMetaData("filename2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPATH, new org.apache.thrift.meta_data.FieldMetaData("outpath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAIN, new org.apache.thrift.meta_data.FieldMetaData("chain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAnalyse_args.class, metaDataMap);
    }

    public getAnalyse_args() {
    }

    public getAnalyse_args(
      java.lang.String filename1,
      java.lang.String filename2,
      java.lang.String outpath,
      java.lang.String chain)
    {
      this();
      this.filename1 = filename1;
      this.filename2 = filename2;
      this.outpath = outpath;
      this.chain = chain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnalyse_args(getAnalyse_args other) {
      if (other.isSetFilename1()) {
        this.filename1 = other.filename1;
      }
      if (other.isSetFilename2()) {
        this.filename2 = other.filename2;
      }
      if (other.isSetOutpath()) {
        this.outpath = other.outpath;
      }
      if (other.isSetChain()) {
        this.chain = other.chain;
      }
    }

    @Override
    public getAnalyse_args deepCopy() {
      return new getAnalyse_args(this);
    }

    @Override
    public void clear() {
      this.filename1 = null;
      this.filename2 = null;
      this.outpath = null;
      this.chain = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilename1() {
      return this.filename1;
    }

    public getAnalyse_args setFilename1(@org.apache.thrift.annotation.Nullable java.lang.String filename1) {
      this.filename1 = filename1;
      return this;
    }

    public void unsetFilename1() {
      this.filename1 = null;
    }

    /** Returns true if field filename1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename1() {
      return this.filename1 != null;
    }

    public void setFilename1IsSet(boolean value) {
      if (!value) {
        this.filename1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilename2() {
      return this.filename2;
    }

    public getAnalyse_args setFilename2(@org.apache.thrift.annotation.Nullable java.lang.String filename2) {
      this.filename2 = filename2;
      return this;
    }

    public void unsetFilename2() {
      this.filename2 = null;
    }

    /** Returns true if field filename2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename2() {
      return this.filename2 != null;
    }

    public void setFilename2IsSet(boolean value) {
      if (!value) {
        this.filename2 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOutpath() {
      return this.outpath;
    }

    public getAnalyse_args setOutpath(@org.apache.thrift.annotation.Nullable java.lang.String outpath) {
      this.outpath = outpath;
      return this;
    }

    public void unsetOutpath() {
      this.outpath = null;
    }

    /** Returns true if field outpath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutpath() {
      return this.outpath != null;
    }

    public void setOutpathIsSet(boolean value) {
      if (!value) {
        this.outpath = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getChain() {
      return this.chain;
    }

    public getAnalyse_args setChain(@org.apache.thrift.annotation.Nullable java.lang.String chain) {
      this.chain = chain;
      return this;
    }

    public void unsetChain() {
      this.chain = null;
    }

    /** Returns true if field chain is set (has been assigned a value) and false otherwise */
    public boolean isSetChain() {
      return this.chain != null;
    }

    public void setChainIsSet(boolean value) {
      if (!value) {
        this.chain = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILENAME1:
        if (value == null) {
          unsetFilename1();
        } else {
          setFilename1((java.lang.String)value);
        }
        break;

      case FILENAME2:
        if (value == null) {
          unsetFilename2();
        } else {
          setFilename2((java.lang.String)value);
        }
        break;

      case OUTPATH:
        if (value == null) {
          unsetOutpath();
        } else {
          setOutpath((java.lang.String)value);
        }
        break;

      case CHAIN:
        if (value == null) {
          unsetChain();
        } else {
          setChain((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME1:
        return getFilename1();

      case FILENAME2:
        return getFilename2();

      case OUTPATH:
        return getOutpath();

      case CHAIN:
        return getChain();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILENAME1:
        return isSetFilename1();
      case FILENAME2:
        return isSetFilename2();
      case OUTPATH:
        return isSetOutpath();
      case CHAIN:
        return isSetChain();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAnalyse_args)
        return this.equals((getAnalyse_args)that);
      return false;
    }

    public boolean equals(getAnalyse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filename1 = true && this.isSetFilename1();
      boolean that_present_filename1 = true && that.isSetFilename1();
      if (this_present_filename1 || that_present_filename1) {
        if (!(this_present_filename1 && that_present_filename1))
          return false;
        if (!this.filename1.equals(that.filename1))
          return false;
      }

      boolean this_present_filename2 = true && this.isSetFilename2();
      boolean that_present_filename2 = true && that.isSetFilename2();
      if (this_present_filename2 || that_present_filename2) {
        if (!(this_present_filename2 && that_present_filename2))
          return false;
        if (!this.filename2.equals(that.filename2))
          return false;
      }

      boolean this_present_outpath = true && this.isSetOutpath();
      boolean that_present_outpath = true && that.isSetOutpath();
      if (this_present_outpath || that_present_outpath) {
        if (!(this_present_outpath && that_present_outpath))
          return false;
        if (!this.outpath.equals(that.outpath))
          return false;
      }

      boolean this_present_chain = true && this.isSetChain();
      boolean that_present_chain = true && that.isSetChain();
      if (this_present_chain || that_present_chain) {
        if (!(this_present_chain && that_present_chain))
          return false;
        if (!this.chain.equals(that.chain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilename1()) ? 131071 : 524287);
      if (isSetFilename1())
        hashCode = hashCode * 8191 + filename1.hashCode();

      hashCode = hashCode * 8191 + ((isSetFilename2()) ? 131071 : 524287);
      if (isSetFilename2())
        hashCode = hashCode * 8191 + filename2.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutpath()) ? 131071 : 524287);
      if (isSetOutpath())
        hashCode = hashCode * 8191 + outpath.hashCode();

      hashCode = hashCode * 8191 + ((isSetChain()) ? 131071 : 524287);
      if (isSetChain())
        hashCode = hashCode * 8191 + chain.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAnalyse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilename1(), other.isSetFilename1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename1, other.filename1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFilename2(), other.isSetFilename2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename2, other.filename2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOutpath(), other.isSetOutpath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutpath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outpath, other.outpath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetChain(), other.isSetChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chain, other.chain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAnalyse_args(");
      boolean first = true;

      sb.append("filename1:");
      if (this.filename1 == null) {
        sb.append("null");
      } else {
        sb.append(this.filename1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename2:");
      if (this.filename2 == null) {
        sb.append("null");
      } else {
        sb.append(this.filename2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outpath:");
      if (this.outpath == null) {
        sb.append("null");
      } else {
        sb.append(this.outpath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chain:");
      if (this.chain == null) {
        sb.append("null");
      } else {
        sb.append(this.chain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAnalyse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAnalyse_argsStandardScheme getScheme() {
        return new getAnalyse_argsStandardScheme();
      }
    }

    private static class getAnalyse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAnalyse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename1 = iprot.readString();
                struct.setFilename1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILENAME2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename2 = iprot.readString();
                struct.setFilename2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outpath = iprot.readString();
                struct.setOutpathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chain = iprot.readString();
                struct.setChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAnalyse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename1 != null) {
          oprot.writeFieldBegin(FILENAME1_FIELD_DESC);
          oprot.writeString(struct.filename1);
          oprot.writeFieldEnd();
        }
        if (struct.filename2 != null) {
          oprot.writeFieldBegin(FILENAME2_FIELD_DESC);
          oprot.writeString(struct.filename2);
          oprot.writeFieldEnd();
        }
        if (struct.outpath != null) {
          oprot.writeFieldBegin(OUTPATH_FIELD_DESC);
          oprot.writeString(struct.outpath);
          oprot.writeFieldEnd();
        }
        if (struct.chain != null) {
          oprot.writeFieldBegin(CHAIN_FIELD_DESC);
          oprot.writeString(struct.chain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAnalyse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAnalyse_argsTupleScheme getScheme() {
        return new getAnalyse_argsTupleScheme();
      }
    }

    private static class getAnalyse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAnalyse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilename1()) {
          optionals.set(0);
        }
        if (struct.isSetFilename2()) {
          optionals.set(1);
        }
        if (struct.isSetOutpath()) {
          optionals.set(2);
        }
        if (struct.isSetChain()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilename1()) {
          oprot.writeString(struct.filename1);
        }
        if (struct.isSetFilename2()) {
          oprot.writeString(struct.filename2);
        }
        if (struct.isSetOutpath()) {
          oprot.writeString(struct.outpath);
        }
        if (struct.isSetChain()) {
          oprot.writeString(struct.chain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filename1 = iprot.readString();
          struct.setFilename1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.filename2 = iprot.readString();
          struct.setFilename2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.outpath = iprot.readString();
          struct.setOutpathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.chain = iprot.readString();
          struct.setChainIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getAnalyse_result implements org.apache.thrift.TBase<getAnalyse_result, getAnalyse_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAnalyse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAnalyse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAnalyse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAnalyse_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAnalyse_result.class, metaDataMap);
    }

    public getAnalyse_result() {
    }

    public getAnalyse_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnalyse_result(getAnalyse_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public getAnalyse_result deepCopy() {
      return new getAnalyse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public getAnalyse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getAnalyse_result)
        return this.equals((getAnalyse_result)that);
      return false;
    }

    public boolean equals(getAnalyse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getAnalyse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAnalyse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAnalyse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAnalyse_resultStandardScheme getScheme() {
        return new getAnalyse_resultStandardScheme();
      }
    }

    private static class getAnalyse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAnalyse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getAnalyse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAnalyse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getAnalyse_resultTupleScheme getScheme() {
        return new getAnalyse_resultTupleScheme();
      }
    }

    private static class getAnalyse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAnalyse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getDNAAnalyse_args implements org.apache.thrift.TBase<getDNAAnalyse_args, getDNAAnalyse_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDNAAnalyse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDNAAnalyse_args");

    private static final org.apache.thrift.protocol.TField FILENAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("filename1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("filename2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outpath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("chain", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDNAAnalyse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDNAAnalyse_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String filename1; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String filename2; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String outpath; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String chain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME1((short)1, "filename1"),
      FILENAME2((short)2, "filename2"),
      OUTPATH((short)3, "outpath"),
      CHAIN((short)4, "chain");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME1
            return FILENAME1;
          case 2: // FILENAME2
            return FILENAME2;
          case 3: // OUTPATH
            return OUTPATH;
          case 4: // CHAIN
            return CHAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME1, new org.apache.thrift.meta_data.FieldMetaData("filename1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME2, new org.apache.thrift.meta_data.FieldMetaData("filename2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPATH, new org.apache.thrift.meta_data.FieldMetaData("outpath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAIN, new org.apache.thrift.meta_data.FieldMetaData("chain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDNAAnalyse_args.class, metaDataMap);
    }

    public getDNAAnalyse_args() {
    }

    public getDNAAnalyse_args(
      java.lang.String filename1,
      java.lang.String filename2,
      java.lang.String outpath,
      java.lang.String chain)
    {
      this();
      this.filename1 = filename1;
      this.filename2 = filename2;
      this.outpath = outpath;
      this.chain = chain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDNAAnalyse_args(getDNAAnalyse_args other) {
      if (other.isSetFilename1()) {
        this.filename1 = other.filename1;
      }
      if (other.isSetFilename2()) {
        this.filename2 = other.filename2;
      }
      if (other.isSetOutpath()) {
        this.outpath = other.outpath;
      }
      if (other.isSetChain()) {
        this.chain = other.chain;
      }
    }

    @Override
    public getDNAAnalyse_args deepCopy() {
      return new getDNAAnalyse_args(this);
    }

    @Override
    public void clear() {
      this.filename1 = null;
      this.filename2 = null;
      this.outpath = null;
      this.chain = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilename1() {
      return this.filename1;
    }

    public getDNAAnalyse_args setFilename1(@org.apache.thrift.annotation.Nullable java.lang.String filename1) {
      this.filename1 = filename1;
      return this;
    }

    public void unsetFilename1() {
      this.filename1 = null;
    }

    /** Returns true if field filename1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename1() {
      return this.filename1 != null;
    }

    public void setFilename1IsSet(boolean value) {
      if (!value) {
        this.filename1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilename2() {
      return this.filename2;
    }

    public getDNAAnalyse_args setFilename2(@org.apache.thrift.annotation.Nullable java.lang.String filename2) {
      this.filename2 = filename2;
      return this;
    }

    public void unsetFilename2() {
      this.filename2 = null;
    }

    /** Returns true if field filename2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename2() {
      return this.filename2 != null;
    }

    public void setFilename2IsSet(boolean value) {
      if (!value) {
        this.filename2 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOutpath() {
      return this.outpath;
    }

    public getDNAAnalyse_args setOutpath(@org.apache.thrift.annotation.Nullable java.lang.String outpath) {
      this.outpath = outpath;
      return this;
    }

    public void unsetOutpath() {
      this.outpath = null;
    }

    /** Returns true if field outpath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutpath() {
      return this.outpath != null;
    }

    public void setOutpathIsSet(boolean value) {
      if (!value) {
        this.outpath = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getChain() {
      return this.chain;
    }

    public getDNAAnalyse_args setChain(@org.apache.thrift.annotation.Nullable java.lang.String chain) {
      this.chain = chain;
      return this;
    }

    public void unsetChain() {
      this.chain = null;
    }

    /** Returns true if field chain is set (has been assigned a value) and false otherwise */
    public boolean isSetChain() {
      return this.chain != null;
    }

    public void setChainIsSet(boolean value) {
      if (!value) {
        this.chain = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILENAME1:
        if (value == null) {
          unsetFilename1();
        } else {
          setFilename1((java.lang.String)value);
        }
        break;

      case FILENAME2:
        if (value == null) {
          unsetFilename2();
        } else {
          setFilename2((java.lang.String)value);
        }
        break;

      case OUTPATH:
        if (value == null) {
          unsetOutpath();
        } else {
          setOutpath((java.lang.String)value);
        }
        break;

      case CHAIN:
        if (value == null) {
          unsetChain();
        } else {
          setChain((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME1:
        return getFilename1();

      case FILENAME2:
        return getFilename2();

      case OUTPATH:
        return getOutpath();

      case CHAIN:
        return getChain();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILENAME1:
        return isSetFilename1();
      case FILENAME2:
        return isSetFilename2();
      case OUTPATH:
        return isSetOutpath();
      case CHAIN:
        return isSetChain();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDNAAnalyse_args)
        return this.equals((getDNAAnalyse_args)that);
      return false;
    }

    public boolean equals(getDNAAnalyse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filename1 = true && this.isSetFilename1();
      boolean that_present_filename1 = true && that.isSetFilename1();
      if (this_present_filename1 || that_present_filename1) {
        if (!(this_present_filename1 && that_present_filename1))
          return false;
        if (!this.filename1.equals(that.filename1))
          return false;
      }

      boolean this_present_filename2 = true && this.isSetFilename2();
      boolean that_present_filename2 = true && that.isSetFilename2();
      if (this_present_filename2 || that_present_filename2) {
        if (!(this_present_filename2 && that_present_filename2))
          return false;
        if (!this.filename2.equals(that.filename2))
          return false;
      }

      boolean this_present_outpath = true && this.isSetOutpath();
      boolean that_present_outpath = true && that.isSetOutpath();
      if (this_present_outpath || that_present_outpath) {
        if (!(this_present_outpath && that_present_outpath))
          return false;
        if (!this.outpath.equals(that.outpath))
          return false;
      }

      boolean this_present_chain = true && this.isSetChain();
      boolean that_present_chain = true && that.isSetChain();
      if (this_present_chain || that_present_chain) {
        if (!(this_present_chain && that_present_chain))
          return false;
        if (!this.chain.equals(that.chain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilename1()) ? 131071 : 524287);
      if (isSetFilename1())
        hashCode = hashCode * 8191 + filename1.hashCode();

      hashCode = hashCode * 8191 + ((isSetFilename2()) ? 131071 : 524287);
      if (isSetFilename2())
        hashCode = hashCode * 8191 + filename2.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutpath()) ? 131071 : 524287);
      if (isSetOutpath())
        hashCode = hashCode * 8191 + outpath.hashCode();

      hashCode = hashCode * 8191 + ((isSetChain()) ? 131071 : 524287);
      if (isSetChain())
        hashCode = hashCode * 8191 + chain.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDNAAnalyse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilename1(), other.isSetFilename1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename1, other.filename1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFilename2(), other.isSetFilename2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename2, other.filename2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOutpath(), other.isSetOutpath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutpath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outpath, other.outpath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetChain(), other.isSetChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chain, other.chain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDNAAnalyse_args(");
      boolean first = true;

      sb.append("filename1:");
      if (this.filename1 == null) {
        sb.append("null");
      } else {
        sb.append(this.filename1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename2:");
      if (this.filename2 == null) {
        sb.append("null");
      } else {
        sb.append(this.filename2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outpath:");
      if (this.outpath == null) {
        sb.append("null");
      } else {
        sb.append(this.outpath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chain:");
      if (this.chain == null) {
        sb.append("null");
      } else {
        sb.append(this.chain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDNAAnalyse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDNAAnalyse_argsStandardScheme getScheme() {
        return new getDNAAnalyse_argsStandardScheme();
      }
    }

    private static class getDNAAnalyse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDNAAnalyse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getDNAAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename1 = iprot.readString();
                struct.setFilename1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILENAME2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename2 = iprot.readString();
                struct.setFilename2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outpath = iprot.readString();
                struct.setOutpathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chain = iprot.readString();
                struct.setChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getDNAAnalyse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename1 != null) {
          oprot.writeFieldBegin(FILENAME1_FIELD_DESC);
          oprot.writeString(struct.filename1);
          oprot.writeFieldEnd();
        }
        if (struct.filename2 != null) {
          oprot.writeFieldBegin(FILENAME2_FIELD_DESC);
          oprot.writeString(struct.filename2);
          oprot.writeFieldEnd();
        }
        if (struct.outpath != null) {
          oprot.writeFieldBegin(OUTPATH_FIELD_DESC);
          oprot.writeString(struct.outpath);
          oprot.writeFieldEnd();
        }
        if (struct.chain != null) {
          oprot.writeFieldBegin(CHAIN_FIELD_DESC);
          oprot.writeString(struct.chain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDNAAnalyse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDNAAnalyse_argsTupleScheme getScheme() {
        return new getDNAAnalyse_argsTupleScheme();
      }
    }

    private static class getDNAAnalyse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDNAAnalyse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDNAAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilename1()) {
          optionals.set(0);
        }
        if (struct.isSetFilename2()) {
          optionals.set(1);
        }
        if (struct.isSetOutpath()) {
          optionals.set(2);
        }
        if (struct.isSetChain()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilename1()) {
          oprot.writeString(struct.filename1);
        }
        if (struct.isSetFilename2()) {
          oprot.writeString(struct.filename2);
        }
        if (struct.isSetOutpath()) {
          oprot.writeString(struct.outpath);
        }
        if (struct.isSetChain()) {
          oprot.writeString(struct.chain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDNAAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filename1 = iprot.readString();
          struct.setFilename1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.filename2 = iprot.readString();
          struct.setFilename2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.outpath = iprot.readString();
          struct.setOutpathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.chain = iprot.readString();
          struct.setChainIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getDNAAnalyse_result implements org.apache.thrift.TBase<getDNAAnalyse_result, getDNAAnalyse_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDNAAnalyse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDNAAnalyse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDNAAnalyse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDNAAnalyse_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDNAAnalyse_result.class, metaDataMap);
    }

    public getDNAAnalyse_result() {
    }

    public getDNAAnalyse_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDNAAnalyse_result(getDNAAnalyse_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public getDNAAnalyse_result deepCopy() {
      return new getDNAAnalyse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public getDNAAnalyse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getDNAAnalyse_result)
        return this.equals((getDNAAnalyse_result)that);
      return false;
    }

    public boolean equals(getDNAAnalyse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getDNAAnalyse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDNAAnalyse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDNAAnalyse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDNAAnalyse_resultStandardScheme getScheme() {
        return new getDNAAnalyse_resultStandardScheme();
      }
    }

    private static class getDNAAnalyse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDNAAnalyse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getDNAAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getDNAAnalyse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDNAAnalyse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getDNAAnalyse_resultTupleScheme getScheme() {
        return new getDNAAnalyse_resultTupleScheme();
      }
    }

    private static class getDNAAnalyse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDNAAnalyse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDNAAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDNAAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getUMIAnalyse_args implements org.apache.thrift.TBase<getUMIAnalyse_args, getUMIAnalyse_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUMIAnalyse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUMIAnalyse_args");

    private static final org.apache.thrift.protocol.TField FILENAME1_FIELD_DESC = new org.apache.thrift.protocol.TField("filename1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILENAME2_FIELD_DESC = new org.apache.thrift.protocol.TField("filename2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField UMI_FIELD_DESC = new org.apache.thrift.protocol.TField("umi", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outpath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("chain", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUMIAnalyse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUMIAnalyse_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String filename1; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String filename2; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String umi; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String outpath; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String chain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME1((short)1, "filename1"),
      FILENAME2((short)2, "filename2"),
      UMI((short)3, "umi"),
      OUTPATH((short)4, "outpath"),
      CHAIN((short)5, "chain");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME1
            return FILENAME1;
          case 2: // FILENAME2
            return FILENAME2;
          case 3: // UMI
            return UMI;
          case 4: // OUTPATH
            return OUTPATH;
          case 5: // CHAIN
            return CHAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME1, new org.apache.thrift.meta_data.FieldMetaData("filename1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILENAME2, new org.apache.thrift.meta_data.FieldMetaData("filename2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UMI, new org.apache.thrift.meta_data.FieldMetaData("umi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPATH, new org.apache.thrift.meta_data.FieldMetaData("outpath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHAIN, new org.apache.thrift.meta_data.FieldMetaData("chain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUMIAnalyse_args.class, metaDataMap);
    }

    public getUMIAnalyse_args() {
    }

    public getUMIAnalyse_args(
      java.lang.String filename1,
      java.lang.String filename2,
      java.lang.String umi,
      java.lang.String outpath,
      java.lang.String chain)
    {
      this();
      this.filename1 = filename1;
      this.filename2 = filename2;
      this.umi = umi;
      this.outpath = outpath;
      this.chain = chain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUMIAnalyse_args(getUMIAnalyse_args other) {
      if (other.isSetFilename1()) {
        this.filename1 = other.filename1;
      }
      if (other.isSetFilename2()) {
        this.filename2 = other.filename2;
      }
      if (other.isSetUmi()) {
        this.umi = other.umi;
      }
      if (other.isSetOutpath()) {
        this.outpath = other.outpath;
      }
      if (other.isSetChain()) {
        this.chain = other.chain;
      }
    }

    @Override
    public getUMIAnalyse_args deepCopy() {
      return new getUMIAnalyse_args(this);
    }

    @Override
    public void clear() {
      this.filename1 = null;
      this.filename2 = null;
      this.umi = null;
      this.outpath = null;
      this.chain = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilename1() {
      return this.filename1;
    }

    public getUMIAnalyse_args setFilename1(@org.apache.thrift.annotation.Nullable java.lang.String filename1) {
      this.filename1 = filename1;
      return this;
    }

    public void unsetFilename1() {
      this.filename1 = null;
    }

    /** Returns true if field filename1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename1() {
      return this.filename1 != null;
    }

    public void setFilename1IsSet(boolean value) {
      if (!value) {
        this.filename1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFilename2() {
      return this.filename2;
    }

    public getUMIAnalyse_args setFilename2(@org.apache.thrift.annotation.Nullable java.lang.String filename2) {
      this.filename2 = filename2;
      return this;
    }

    public void unsetFilename2() {
      this.filename2 = null;
    }

    /** Returns true if field filename2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename2() {
      return this.filename2 != null;
    }

    public void setFilename2IsSet(boolean value) {
      if (!value) {
        this.filename2 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUmi() {
      return this.umi;
    }

    public getUMIAnalyse_args setUmi(@org.apache.thrift.annotation.Nullable java.lang.String umi) {
      this.umi = umi;
      return this;
    }

    public void unsetUmi() {
      this.umi = null;
    }

    /** Returns true if field umi is set (has been assigned a value) and false otherwise */
    public boolean isSetUmi() {
      return this.umi != null;
    }

    public void setUmiIsSet(boolean value) {
      if (!value) {
        this.umi = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOutpath() {
      return this.outpath;
    }

    public getUMIAnalyse_args setOutpath(@org.apache.thrift.annotation.Nullable java.lang.String outpath) {
      this.outpath = outpath;
      return this;
    }

    public void unsetOutpath() {
      this.outpath = null;
    }

    /** Returns true if field outpath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutpath() {
      return this.outpath != null;
    }

    public void setOutpathIsSet(boolean value) {
      if (!value) {
        this.outpath = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getChain() {
      return this.chain;
    }

    public getUMIAnalyse_args setChain(@org.apache.thrift.annotation.Nullable java.lang.String chain) {
      this.chain = chain;
      return this;
    }

    public void unsetChain() {
      this.chain = null;
    }

    /** Returns true if field chain is set (has been assigned a value) and false otherwise */
    public boolean isSetChain() {
      return this.chain != null;
    }

    public void setChainIsSet(boolean value) {
      if (!value) {
        this.chain = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILENAME1:
        if (value == null) {
          unsetFilename1();
        } else {
          setFilename1((java.lang.String)value);
        }
        break;

      case FILENAME2:
        if (value == null) {
          unsetFilename2();
        } else {
          setFilename2((java.lang.String)value);
        }
        break;

      case UMI:
        if (value == null) {
          unsetUmi();
        } else {
          setUmi((java.lang.String)value);
        }
        break;

      case OUTPATH:
        if (value == null) {
          unsetOutpath();
        } else {
          setOutpath((java.lang.String)value);
        }
        break;

      case CHAIN:
        if (value == null) {
          unsetChain();
        } else {
          setChain((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME1:
        return getFilename1();

      case FILENAME2:
        return getFilename2();

      case UMI:
        return getUmi();

      case OUTPATH:
        return getOutpath();

      case CHAIN:
        return getChain();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILENAME1:
        return isSetFilename1();
      case FILENAME2:
        return isSetFilename2();
      case UMI:
        return isSetUmi();
      case OUTPATH:
        return isSetOutpath();
      case CHAIN:
        return isSetChain();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getUMIAnalyse_args)
        return this.equals((getUMIAnalyse_args)that);
      return false;
    }

    public boolean equals(getUMIAnalyse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filename1 = true && this.isSetFilename1();
      boolean that_present_filename1 = true && that.isSetFilename1();
      if (this_present_filename1 || that_present_filename1) {
        if (!(this_present_filename1 && that_present_filename1))
          return false;
        if (!this.filename1.equals(that.filename1))
          return false;
      }

      boolean this_present_filename2 = true && this.isSetFilename2();
      boolean that_present_filename2 = true && that.isSetFilename2();
      if (this_present_filename2 || that_present_filename2) {
        if (!(this_present_filename2 && that_present_filename2))
          return false;
        if (!this.filename2.equals(that.filename2))
          return false;
      }

      boolean this_present_umi = true && this.isSetUmi();
      boolean that_present_umi = true && that.isSetUmi();
      if (this_present_umi || that_present_umi) {
        if (!(this_present_umi && that_present_umi))
          return false;
        if (!this.umi.equals(that.umi))
          return false;
      }

      boolean this_present_outpath = true && this.isSetOutpath();
      boolean that_present_outpath = true && that.isSetOutpath();
      if (this_present_outpath || that_present_outpath) {
        if (!(this_present_outpath && that_present_outpath))
          return false;
        if (!this.outpath.equals(that.outpath))
          return false;
      }

      boolean this_present_chain = true && this.isSetChain();
      boolean that_present_chain = true && that.isSetChain();
      if (this_present_chain || that_present_chain) {
        if (!(this_present_chain && that_present_chain))
          return false;
        if (!this.chain.equals(that.chain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilename1()) ? 131071 : 524287);
      if (isSetFilename1())
        hashCode = hashCode * 8191 + filename1.hashCode();

      hashCode = hashCode * 8191 + ((isSetFilename2()) ? 131071 : 524287);
      if (isSetFilename2())
        hashCode = hashCode * 8191 + filename2.hashCode();

      hashCode = hashCode * 8191 + ((isSetUmi()) ? 131071 : 524287);
      if (isSetUmi())
        hashCode = hashCode * 8191 + umi.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutpath()) ? 131071 : 524287);
      if (isSetOutpath())
        hashCode = hashCode * 8191 + outpath.hashCode();

      hashCode = hashCode * 8191 + ((isSetChain()) ? 131071 : 524287);
      if (isSetChain())
        hashCode = hashCode * 8191 + chain.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUMIAnalyse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFilename1(), other.isSetFilename1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename1, other.filename1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetFilename2(), other.isSetFilename2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename2, other.filename2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUmi(), other.isSetUmi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUmi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.umi, other.umi);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOutpath(), other.isSetOutpath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutpath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outpath, other.outpath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetChain(), other.isSetChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chain, other.chain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUMIAnalyse_args(");
      boolean first = true;

      sb.append("filename1:");
      if (this.filename1 == null) {
        sb.append("null");
      } else {
        sb.append(this.filename1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filename2:");
      if (this.filename2 == null) {
        sb.append("null");
      } else {
        sb.append(this.filename2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("umi:");
      if (this.umi == null) {
        sb.append("null");
      } else {
        sb.append(this.umi);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outpath:");
      if (this.outpath == null) {
        sb.append("null");
      } else {
        sb.append(this.outpath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chain:");
      if (this.chain == null) {
        sb.append("null");
      } else {
        sb.append(this.chain);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUMIAnalyse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUMIAnalyse_argsStandardScheme getScheme() {
        return new getUMIAnalyse_argsStandardScheme();
      }
    }

    private static class getUMIAnalyse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUMIAnalyse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getUMIAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename1 = iprot.readString();
                struct.setFilename1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILENAME2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename2 = iprot.readString();
                struct.setFilename2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UMI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.umi = iprot.readString();
                struct.setUmiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outpath = iprot.readString();
                struct.setOutpathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chain = iprot.readString();
                struct.setChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getUMIAnalyse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename1 != null) {
          oprot.writeFieldBegin(FILENAME1_FIELD_DESC);
          oprot.writeString(struct.filename1);
          oprot.writeFieldEnd();
        }
        if (struct.filename2 != null) {
          oprot.writeFieldBegin(FILENAME2_FIELD_DESC);
          oprot.writeString(struct.filename2);
          oprot.writeFieldEnd();
        }
        if (struct.umi != null) {
          oprot.writeFieldBegin(UMI_FIELD_DESC);
          oprot.writeString(struct.umi);
          oprot.writeFieldEnd();
        }
        if (struct.outpath != null) {
          oprot.writeFieldBegin(OUTPATH_FIELD_DESC);
          oprot.writeString(struct.outpath);
          oprot.writeFieldEnd();
        }
        if (struct.chain != null) {
          oprot.writeFieldBegin(CHAIN_FIELD_DESC);
          oprot.writeString(struct.chain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUMIAnalyse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUMIAnalyse_argsTupleScheme getScheme() {
        return new getUMIAnalyse_argsTupleScheme();
      }
    }

    private static class getUMIAnalyse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUMIAnalyse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUMIAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilename1()) {
          optionals.set(0);
        }
        if (struct.isSetFilename2()) {
          optionals.set(1);
        }
        if (struct.isSetUmi()) {
          optionals.set(2);
        }
        if (struct.isSetOutpath()) {
          optionals.set(3);
        }
        if (struct.isSetChain()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetFilename1()) {
          oprot.writeString(struct.filename1);
        }
        if (struct.isSetFilename2()) {
          oprot.writeString(struct.filename2);
        }
        if (struct.isSetUmi()) {
          oprot.writeString(struct.umi);
        }
        if (struct.isSetOutpath()) {
          oprot.writeString(struct.outpath);
        }
        if (struct.isSetChain()) {
          oprot.writeString(struct.chain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUMIAnalyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.filename1 = iprot.readString();
          struct.setFilename1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.filename2 = iprot.readString();
          struct.setFilename2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.umi = iprot.readString();
          struct.setUmiIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outpath = iprot.readString();
          struct.setOutpathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.chain = iprot.readString();
          struct.setChainIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getUMIAnalyse_result implements org.apache.thrift.TBase<getUMIAnalyse_result, getUMIAnalyse_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUMIAnalyse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUMIAnalyse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUMIAnalyse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUMIAnalyse_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUMIAnalyse_result.class, metaDataMap);
    }

    public getUMIAnalyse_result() {
    }

    public getUMIAnalyse_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUMIAnalyse_result(getUMIAnalyse_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public getUMIAnalyse_result deepCopy() {
      return new getUMIAnalyse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public getUMIAnalyse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getUMIAnalyse_result)
        return this.equals((getUMIAnalyse_result)that);
      return false;
    }

    public boolean equals(getUMIAnalyse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getUMIAnalyse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUMIAnalyse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUMIAnalyse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUMIAnalyse_resultStandardScheme getScheme() {
        return new getUMIAnalyse_resultStandardScheme();
      }
    }

    private static class getUMIAnalyse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUMIAnalyse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getUMIAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getUMIAnalyse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUMIAnalyse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getUMIAnalyse_resultTupleScheme getScheme() {
        return new getUMIAnalyse_resultTupleScheme();
      }
    }

    private static class getUMIAnalyse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUMIAnalyse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUMIAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUMIAnalyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class conversion_args implements org.apache.thrift.TBase<conversion_args, conversion_args._Fields>, java.io.Serializable, Cloneable, Comparable<conversion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("conversion_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new conversion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new conversion_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String fileName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(conversion_args.class, metaDataMap);
    }

    public conversion_args() {
    }

    public conversion_args(
      java.lang.String fileName)
    {
      this();
      this.fileName = fileName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public conversion_args(conversion_args other) {
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
    }

    @Override
    public conversion_args deepCopy() {
      return new conversion_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getFileName() {
      return this.fileName;
    }

    public conversion_args setFileName(@org.apache.thrift.annotation.Nullable java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof conversion_args)
        return this.equals((conversion_args)that);
      return false;
    }

    public boolean equals(conversion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(conversion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFileName(), other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("conversion_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class conversion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public conversion_argsStandardScheme getScheme() {
        return new conversion_argsStandardScheme();
      }
    }

    private static class conversion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<conversion_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, conversion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, conversion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class conversion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public conversion_argsTupleScheme getScheme() {
        return new conversion_argsTupleScheme();
      }
    }

    private static class conversion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<conversion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, conversion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, conversion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class conversion_result implements org.apache.thrift.TBase<conversion_result, conversion_result._Fields>, java.io.Serializable, Cloneable, Comparable<conversion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("conversion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new conversion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new conversion_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(conversion_result.class, metaDataMap);
    }

    public conversion_result() {
    }

    public conversion_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public conversion_result(conversion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public conversion_result deepCopy() {
      return new conversion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public conversion_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof conversion_result)
        return this.equals((conversion_result)that);
      return false;
    }

    public boolean equals(conversion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(conversion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("conversion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class conversion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public conversion_resultStandardScheme getScheme() {
        return new conversion_resultStandardScheme();
      }
    }

    private static class conversion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<conversion_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, conversion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, conversion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class conversion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public conversion_resultTupleScheme getScheme() {
        return new conversion_resultTupleScheme();
      }
    }

    private static class conversion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<conversion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, conversion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, conversion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class exampleTRA_args implements org.apache.thrift.TBase<exampleTRA_args, exampleTRA_args._Fields>, java.io.Serializable, Cloneable, Comparable<exampleTRA_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exampleTRA_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exampleTRA_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exampleTRA_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exampleTRA_args.class, metaDataMap);
    }

    public exampleTRA_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exampleTRA_args(exampleTRA_args other) {
    }

    @Override
    public exampleTRA_args deepCopy() {
      return new exampleTRA_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof exampleTRA_args)
        return this.equals((exampleTRA_args)that);
      return false;
    }

    public boolean equals(exampleTRA_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(exampleTRA_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exampleTRA_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exampleTRA_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRA_argsStandardScheme getScheme() {
        return new exampleTRA_argsStandardScheme();
      }
    }

    private static class exampleTRA_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<exampleTRA_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, exampleTRA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, exampleTRA_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exampleTRA_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRA_argsTupleScheme getScheme() {
        return new exampleTRA_argsTupleScheme();
      }
    }

    private static class exampleTRA_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exampleTRA_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exampleTRA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exampleTRA_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class exampleTRA_result implements org.apache.thrift.TBase<exampleTRA_result, exampleTRA_result._Fields>, java.io.Serializable, Cloneable, Comparable<exampleTRA_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exampleTRA_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exampleTRA_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exampleTRA_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exampleTRA_result.class, metaDataMap);
    }

    public exampleTRA_result() {
    }

    public exampleTRA_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exampleTRA_result(exampleTRA_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public exampleTRA_result deepCopy() {
      return new exampleTRA_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exampleTRA_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof exampleTRA_result)
        return this.equals((exampleTRA_result)that);
      return false;
    }

    public boolean equals(exampleTRA_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(exampleTRA_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exampleTRA_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exampleTRA_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRA_resultStandardScheme getScheme() {
        return new exampleTRA_resultStandardScheme();
      }
    }

    private static class exampleTRA_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<exampleTRA_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, exampleTRA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, exampleTRA_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exampleTRA_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRA_resultTupleScheme getScheme() {
        return new exampleTRA_resultTupleScheme();
      }
    }

    private static class exampleTRA_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<exampleTRA_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exampleTRA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exampleTRA_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class exampleTRB_args implements org.apache.thrift.TBase<exampleTRB_args, exampleTRB_args._Fields>, java.io.Serializable, Cloneable, Comparable<exampleTRB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exampleTRB_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exampleTRB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exampleTRB_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exampleTRB_args.class, metaDataMap);
    }

    public exampleTRB_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exampleTRB_args(exampleTRB_args other) {
    }

    @Override
    public exampleTRB_args deepCopy() {
      return new exampleTRB_args(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof exampleTRB_args)
        return this.equals((exampleTRB_args)that);
      return false;
    }

    public boolean equals(exampleTRB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(exampleTRB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exampleTRB_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exampleTRB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRB_argsStandardScheme getScheme() {
        return new exampleTRB_argsStandardScheme();
      }
    }

    private static class exampleTRB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<exampleTRB_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, exampleTRB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, exampleTRB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exampleTRB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRB_argsTupleScheme getScheme() {
        return new exampleTRB_argsTupleScheme();
      }
    }

    private static class exampleTRB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exampleTRB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exampleTRB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exampleTRB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class exampleTRB_result implements org.apache.thrift.TBase<exampleTRB_result, exampleTRB_result._Fields>, java.io.Serializable, Cloneable, Comparable<exampleTRB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exampleTRB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exampleTRB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exampleTRB_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exampleTRB_result.class, metaDataMap);
    }

    public exampleTRB_result() {
    }

    public exampleTRB_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exampleTRB_result(exampleTRB_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    @Override
    public exampleTRB_result deepCopy() {
      return new exampleTRB_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exampleTRB_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof exampleTRB_result)
        return this.equals((exampleTRB_result)that);
      return false;
    }

    public boolean equals(exampleTRB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(exampleTRB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exampleTRB_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exampleTRB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRB_resultStandardScheme getScheme() {
        return new exampleTRB_resultStandardScheme();
      }
    }

    private static class exampleTRB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<exampleTRB_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, exampleTRB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, exampleTRB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exampleTRB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public exampleTRB_resultTupleScheme getScheme() {
        return new exampleTRB_resultTupleScheme();
      }
    }

    private static class exampleTRB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<exampleTRB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exampleTRB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exampleTRB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
